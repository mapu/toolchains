Platform 	= Sim

############################
#Function to get the simulation IM and MIM content 
#Process *.s.asm Assemble Code
# assmeble the IM/MIM Instruction
define AsIns
	if [ -f *.s.asm ]; then \
		${LLVM_BIN_PATH}/llvm-mc         -arch=mspu       -filetype=obj *.s.asm  -o app.s.o;  \
	else \
		touch MIMX.data;\
	fi;	

	if [ -f *.m.asm ]; then \
		${LLVM_BIN_PATH}/llvm-mc         -arch=mmpu       -filetype=obj  *.m.asm   -o app.m.o;  \
	elif [ -f *.xm.asm ]; then \
		${LLVM_BIN_PATH}/llvm-mc         -arch=mmpu       -filetype=obj  *.xm.asm  -o app.xm.o;  \
	else \
		touch MIMX.data;\
	fi;

	if [ -f *.ym.asm ]; then \
		${LLVM_BIN_PATH}/llvm-mc         -arch=mmpu       -filetype=obj *.ym.asm  -o app.ym.o;  \
	else \
		touch MIMX.data;\
	fi;
endef


define LnkIns
	if [ -f *.s.asm ] && [ -f *.xm.asm ] && [ -f *.ym.asm ]; then \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.xm.out  app.xm.o; \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.ym.out  app.ym.o; \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.s.out  app.s.o  --just-symbols app.xm.out --just-symbols app.ym.out; \
        elif  [ -f *.s.asm ] && [ -f *.m.asm ] && [ -f *.ym.asm ]; then \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.m.out  app.m.o; \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.ym.out  app.ym.o; \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.s.out  app.s.o  --just-symbols app.m.out  --just-symbols app.ym.out; \
        elif  [ -f *.s.asm ] && [ -f *.ym.asm ]; then \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.ym.out  app.ym.o; \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.s.out  app.s.o  --just-symbols app.ym.out; \
        elif  [ -f *.s.asm ] && [ -f *.xm.asm ]; then \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.xm.out  app.xm.o; \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.s.out  app.s.o  --just-symbols app.xm.out; \
        elif  [ -f *.s.asm ] && [ -f *.m.asm ]; then \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.m.out  app.m.o; \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.s.out  app.s.o  --just-symbols app.m.o; \
        elif  [ -f *.s.asm ] ; then \
		${LLVM_BIN_PATH}/llvm-ld         -T Script.ld      -o app.s.out  app.s.o; \
	else \
		echo "file:: Makefile.sim--This Scalar and MicroCode Combination is not supported!!";\
	fi;
endef

define DisAsIns
	if [ -f *.s.asm ] && [ -f *.xm.asm ] && [ -f *.ym.asm ]; then \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mspu    -t    -disassemble  app.s.out    > app.s.dis; \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mmpu        -disassemble  app.xm.out  > app.xm.dis; \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mmpu        -disassemble  app.ym.out  > app.ym.dis; \
        elif  [ -f *.s.asm ] && [ -f *.m.asm ] && [ -f *.ym.asm ]; then \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mspu    -t    -disassemble  app.s.out    > app.s.dis; \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mmpu        -disassemble  app.m.out    > app.m.dis; \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mmpu        -disassemble  app.ym.out  > app.ym.dis; \
        elif  [ -f *.s.asm ] && [ -f *.ym.asm ]; then \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mspu    -t    -disassemble  app.s.out    > app.s.dis; \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mmpu        -disassemble  app.ym.out  > app.ym.dis; \
        elif  [ -f *.s.asm ] && [ -f *.xm.asm ]; then \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mspu    -t    -disassemble  app.s.out    > app.s.dis; \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mmpu        -disassemble  app.xm.out  > app.xm.dis; \
        elif  [ -f *.s.asm ] && [ -f *.m.asm ]; then \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mmpu        -disassemble  app.m.out    > app.m.dis; \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mspu    -t    -disassemble  app.s.out    > app.s.dis; \
        elif  [ -f *.s.asm ] ; then \
		${LLVM_BIN_PATH}/llvm-objdump    -arch=mspu    -t    -disassemble  app.s.out    > app.s.dis; \
	else \
		echo "file:: Makefile.sim--This Scalar and MicroCode Combination is not supported!!";\
	fi;
endef

define GemInsData
	if [ -f *.s.asm ] && [ -f *.xm.asm ] && [ -f *.ym.asm ]; then \
		${ToolPath}/exe2txt -i ${ToolPath}/IMConfig.txt      -e app.s.out; \
		${ToolPath}/exe2txt -i ${ToolPath}/MIMXConfig.txt    -e app.xm.out; \
		${ToolPath}/exe2txt -i ${ToolPath}/MIMYConfig.txt    -e app.ym.out; \
        elif  [ -f *.s.asm ] && [ -f *.m.asm ] && [ -f *.ym.asm ]; then \
		${ToolPath}/exe2txt -i ${ToolPath}/IMConfig.txt      -e app.s.out; \
		${ToolPath}/exe2txt -i ${ToolPath}/MIMXConfig.txt    -e app.m.out; \
		${ToolPath}/exe2txt -i ${ToolPath}/MIMYConfig.txt    -e app.ym.out; \
        elif  [ -f *.s.asm ] && [ -f *.ym.asm ]; then \
		${ToolPath}/exe2txt -i ${ToolPath}/IMConfig.txt      -e app.s.out; \
		${ToolPath}/exe2txt -i ${ToolPath}/MIMYConfig.txt    -e app.ym.out; \
                touch MIMX.data;\
        elif  [ -f *.s.asm ] && [ -f *.xm.asm ]; then \
		${ToolPath}/exe2txt -i ${ToolPath}/IMConfig.txt      -e app.s.out; \
		${ToolPath}/exe2txt -i ${ToolPath}/MIMXConfig.txt    -e app.xm.out; \
                touch MIMY.data;\
        elif  [ -f *.s.asm ] && [ -f *.m.asm ]; then \
		${ToolPath}/exe2txt -i ${ToolPath}/IMConfig.txt      -e app.s.out; \
		${ToolPath}/exe2txt -i ${ToolPath}/MIMXConfig.txt    -e app.m.out; \
                touch MIMY.data;\
        elif  [ -f *.s.asm ] ; then \
		${ToolPath}/exe2txt -i ${ToolPath}/IMConfig.txt      -e app.s.out; \
                touch MIMX.data;\
                touch MIMY.data;\
	else \
                touch IM.data;\
                touch MIMX.data;\
                touch MIMY.data;\
	fi;
endef


