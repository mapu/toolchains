////////////////////////////////////////////////////////////////////
//
// Unknown instructions
//

output header {{
    /**
     * Static instruction class for unknown (illegal) instructions.
     * These cause simulator termination if they are executed in a
     * non-speculative mode.  This is a leaf class.
     */
    class Unknown : public MapuStaticInst
    {
        /// Disassembly of original instruction.
        const std::string originalDisassembly;
      public:
        /// Constructor
        Unknown(ExtMachInst _machInst)
            : MapuStaticInst("unknown", _machInst, No_OpClass),
              originalDisassembly("unknown")
        {
            // don't call execute() (which panics) if we're on a
            // speculative path
            //flags[IsNonSpeculative] = true;
        }
        
        Unknown(const std::string _originalDisassembly, ExtMachInst _machInst)
            : MapuStaticInst("unknown", _machInst, No_OpClass),
              originalDisassembly(_originalDisassembly)
        {
            // don't call execute() (which panics) if we're on a
            // speculative path
            //flags[IsNonSpeculative] = true;
        }

        %(BasicExecDeclare)s

        std::string
        generateDisassembly(Addr pc, const SymbolTable *symtab) const;
    };
}};

output decoder {{
    std::string
    Unknown::generateDisassembly(Addr pc, const SymbolTable *symtab) const
    {
        return csprintf("%-10s (inst 0x%x, opcode 0x%x, binary:%s)",
                        originalDisassembly, machInst, OPCODE, inst2string(machInst));
    }
}};

output exec {{
    Fault
    Unknown::execute(%(CPU_exec_context)s *xc,
                     Trace::InstRecord *traceData) const
    {
        return NoFault;//new ReservedInstructionFault;
    }
}};

def format Unknown(name = 'unknown') {{
    decode_block = '''
      return new Unknown("%(name)s",machInst);\n
    ''' % { 'name' : name}
}};

