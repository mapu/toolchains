////////////////////////////////////////////////////////////////////
//
// Integeral MAC instructions
//
output header {{
using namespace UcpISA;

class ImacOp : public MpuStaticInst {
protected:
  // Constructor
  ImacOp(const char *mnem, ExtMachInst _machInst, MOpClass __mopClass)
    : MpuStaticInst(mnem, _machInst, __mopClass) {
    cond = IMAC_C;
    c_not = IMAC_CN;
    Flags = IMAC_FLAG;
  }

  void printDest(std::ostream &os, int dest) const ;

  void print1stOp(std::ostream &os) const ;

  void print2ndOp(std::ostream &os) const ;

  void printExpHead(std::ostream &os) const ;

  void printFlags(std::ostream &os) const ;
};
}};

//Outputs to decoder.cc
output decoder {{
void ImacOp::printDest(std::ostream &os, int dest) const {
  if (IMAC_OP == 0x8)
    os << "->MR";
  else if (IMAC_OP == 0xA || IMAC_OP == 0xC)
    MpuStaticInst::printDest(os, _destRegIdx[2]);
  else if (IMAC_OP != 0x9 && IMAC_OP != 0xB)
    MpuStaticInst::printDest(os, _destRegIdx[0]);
}

void ImacOp::print2ndOp(std::ostream &os) const {
  switch (IMAC_OP) {
  case 0x3:
  case 0x8: os << "*"; break;
  default: os << ""; break;
  }
}

void ImacOp::print1stOp(std::ostream &os) const {
  switch (IMAC_OP) {
  case 0x3: os << "+-"; break;
  case 0x8: os << "+"; break;
  case 0xB:
  case 0xC: break;
  default: os << "*"; break;
  }
}

void ImacOp::printExpHead(std::ostream &os) const {
  switch (IMAC_OP) {
  case 0x9:
  case 0xA:
  case 0xB:
  case 0xC: os << "MR+="; break;
  default: break;
  }
}

void ImacOp::printFlags(std::ostream &os) const {
  std::string split = "";
  if (Flags || IMAC_OP == 0x1) {
    os << "(";
    if (IMAC_OP == 0x1) {
      os << "T";
      split = ",";
    }
    if (IMAC_CR) {
      os << split << "CR";
      split = ",";
    }
    if (IMAC_L) {
      os << split << "L";
      split = ",";
    }
    if (IMAC_I) {
      os << split << "I";
      split = ",";
    }
    if (IMAC_U) {
      os << split << "U";
      split = ",";
    }
    if (IMAC_B) {
      os << split << "B";
      split = ",";
    }
    if (IMAC_H) os << split << "H";
    os << ")";
  }
}

}};

def format ImacOp(code, *opt_flags) {{
  iop = InstObjParams(name, Name, 'ImacOp', code, opt_flags)
  header_output = BasicDeclare.subst(iop)
  decoder_output = BasicConstructor.subst(iop)
  decode_block = CondCheckDecode.subst(iop)
  exec_output = BasicExecute.subst(iop)
}};

