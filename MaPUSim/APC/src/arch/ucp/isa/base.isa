////////////////////////////////////////////////////////////////////
//
// Base class for Ucp instructions, and some support functions
//

//Outputs to decoder.hh
output header {{

    using namespace UcpISA;

    /**
     * Base class for all Ucp static instructions.
     */
    class UcpStaticInst : public StaticInst
    {
      protected:

        // Constructor
        UcpStaticInst(const char *mnem, ExtMachInst _machInst, OpClass __opClass)
            : StaticInst(mnem, _machInst, __opClass)
        {
        }

        /// Print a register name for disassembly given the unique
        /// dependence tag number (FP or int).
        void printReg (std::ostream &os, int reg) const;
        void printKReg (std::ostream &os, int reg) const;
        void printSVRReg (std::ostream &os, int reg) const;
        void printMReg (std::ostream &os, int reg) const;
        void printSHUReg (std::ostream &os, int reg) const;

        std::string generateDisassembly(Addr pc, const SymbolTable *symtab) const;

      public:
        void
        advancePC(UcpISA::PCState &pc) const
        {
            pc.advance();
        }
    };

}};

//Ouputs to decoder.cc
output decoder {{

    void UcpStaticInst::printReg(std::ostream &os, int reg) const
    {
        if (reg < J_Base_DepTag) {
            ccprintf(os, "r%d", reg);
        } else if (reg < FP_Base_DepTag) {
            ccprintf(os, "j%d", reg - J_Base_DepTag);
        } else if (reg < DR_Base_DepTag) {
            ccprintf(os, "f%d", reg - FP_Base_DepTag);
        } else if (reg < Ctrl_Base_DepTag){
            ccprintf(os, "dr%d", reg - DR_Base_DepTag);
        } else if (reg < Ctrl_Base_DepTag + MISCREG_MC_BASE) {
          if (reg == Ctrl_Base_DepTag) ccprintf(os, "stat");
        } else if(reg == Ctrl_Base_DepTag + MISCREG_MC_BASE){
         ccprintf(os, "mc.r0");
       } else if(reg == Ctrl_Base_DepTag + MISCREG_MC_BASE + 1){
         ccprintf(os, "mc.r1");
       } else if(reg == Ctrl_Base_DepTag + MISCREG_MC_BASE + 2){
         ccprintf(os, "mc.w0");
       } else if(reg == Ctrl_Base_DepTag + MISCREG_MC_BASE + 3){
         ccprintf(os, "mc.w1");
       } else if(reg == Ctrl_Base_DepTag + MISCREG_MC_BASE + 4){
         ccprintf(os, "mc.w2");
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KE_BASE){
         ccprintf(os, "kb%d", reg - Ctrl_Base_DepTag - MISCREG_KB_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KS_BASE){
         ccprintf(os, "ke%d", reg - Ctrl_Base_DepTag -  MISCREG_KE_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KI_BASE){
         ccprintf(os, "ks%d", reg - Ctrl_Base_DepTag -  MISCREG_KS_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KM_BASE){
         ccprintf(os, "ki%d", reg - Ctrl_Base_DepTag -  MISCREG_KI_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KG_BASE){
         ccprintf(os, "km%d", reg - Ctrl_Base_DepTag -  MISCREG_KM_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KL_BASE){
         ccprintf(os, "kg%d", reg - Ctrl_Base_DepTag -  MISCREG_KG_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KC_BASE){
         ccprintf(os, "kl%d", reg - Ctrl_Base_DepTag -  MISCREG_KL_BASE);
       } else if(reg == Ctrl_Base_DepTag + MISCREG_KC_BASE){
         ccprintf(os, "cstat");
       } else panic("Unknown reg index.\n");
    }

    void UcpStaticInst::printSVRReg(std::ostream &os, int reg) const
    {
       ccprintf(os, "svr%d", reg-MPU_Base_DepTag-SYN_SVR_BASE);
    }

    void UcpStaticInst::printSHUReg(std::ostream &os, int reg) const
    {
       if( reg  == 442)      { ccprintf(os, "shu0.t0");}
       else if( reg  == 443) { ccprintf(os, "shu0.t1");}
       else if( reg  == 444) { ccprintf(os, "shu0.t2");}
       else if( reg  == 445) { ccprintf(os, "shu0.t3");}
       else if( reg  == 458) { ccprintf(os, "shu1.t0");}
       else if( reg  == 459) { ccprintf(os, "shu1.t1");}
       else if( reg  == 460) { ccprintf(os, "shu1.t2");}
       else if( reg  == 461) { ccprintf(os, "shu1.t3");}
    }

    void UcpStaticInst::printKReg(std::ostream &os, int reg) const
    {

       if(reg < Ctrl_Base_DepTag + MISCREG_KE_BASE){
         ccprintf(os, "kb%d", reg - Ctrl_Base_DepTag - MISCREG_KB_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KS_BASE){
         ccprintf(os, "ke%d", reg - Ctrl_Base_DepTag -  MISCREG_KE_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KI_BASE){
         ccprintf(os, "ks%d", reg - Ctrl_Base_DepTag -  MISCREG_KS_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KM_BASE){
         ccprintf(os, "ki%d", reg - Ctrl_Base_DepTag -  MISCREG_KI_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KG_BASE){
         ccprintf(os, "km%d", reg - Ctrl_Base_DepTag -  MISCREG_KM_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KL_BASE){
         ccprintf(os, "kg%d", reg - Ctrl_Base_DepTag -  MISCREG_KG_BASE);
       } else if(reg < Ctrl_Base_DepTag + MISCREG_KC_BASE){
         ccprintf(os, "kl%d", reg - Ctrl_Base_DepTag -  MISCREG_KL_BASE);
       } else if(reg == Ctrl_Base_DepTag + MISCREG_KC_BASE){
         ccprintf(os, "cstat");
       } 
    }

    std::string UcpStaticInst::generateDisassembly(Addr pc, const SymbolTable *symtab) const
    {
        std::stringstream ss;

        ccprintf(ss, "%-10s ", mnemonic);

        // Need to find standard way to not print
        // this info. Maybe add bool variable to
        // class?
      if(OPCODE_HI == 0x4) {
       if(OPCODE_LO == 0x4) {
        printKReg(ss, _destRegIdx[0]);
        ss << ", ";
        printReg(ss, _srcRegIdx[0]);
       }else if(OPCODE_LO == 0x5) {
        printReg(ss, _destRegIdx[0]);
        ss << ", ";
          printKReg(ss, _srcRegIdx[0]);
       } else if (OPCODE_LO == 0x8) {
         printSHUReg(ss, _destRegIdx[0]);
         ss << ", ";
         printSVRReg(ss, _srcRegIdx[0]);
       }else if (OPCODE_LO == 0x9) {
         printSVRReg(ss, _destRegIdx[0]);
         ss << ", ";
         printSHUReg(ss, _srcRegIdx[0]);
       }else if (OPCODE_LO == 0xa) {
         printSHUReg(ss, _destRegIdx[0]);
         ss << ", ";
         printReg(ss, _srcRegIdx[0]);
       }else if (OPCODE_LO == 0xb) {
         printReg(ss, _destRegIdx[0]);
         ss << ", ";
         printSHUReg(ss, _srcRegIdx[0]);
       }else if (OPCODE_LO == 0xc) {
         printReg(ss, _destRegIdx[0]);
         ss << ", ";
         printReg(ss, _srcRegIdx[0]);
       }else if (OPCODE_LO == 0xd) {
         printReg(ss, _destRegIdx[0]);
         ss << ", ";
         printReg(ss, _srcRegIdx[0]);
       }else if (OPCODE_LO == 0x10) {
         printSVRReg(ss, _destRegIdx[0]);
         ss << "[";
         printReg(ss, _srcRegIdx[0]);
         ss << "]";
         ss << ", ";
         printReg(ss, _srcRegIdx[1]);
       }else if (OPCODE_LO == 0x11) {
         printReg(ss, _destRegIdx[0]);
         ss << ", ";
         printSVRReg(ss, _srcRegIdx[0]);
         ss << "[";
         printReg(ss, _srcRegIdx[1]);
         ss << "]";
       }else if (OPCODE_LO == 0x12) {
         printSVRReg(ss, _destRegIdx[0]);
         ss << "[";
         ccprintf(ss, "%d", SYN_IMM6);
         ss << "]";
         ss << ", ";
         printReg(ss, _srcRegIdx[0]);
       }else if (OPCODE_LO == 0x13) {
         printReg(ss, _destRegIdx[0]);
         ss << ", ";
         printSVRReg(ss, _srcRegIdx[0]);
         ss << "[";
         ccprintf(ss, "%d", SYN_IMM6);
         ss << "]";
       }

     }else if(OPCODE_HI == 0x3) {
       if(OPCODE_LO == 0x10) {
         ss << "CH[";
         ccprintf(ss, "%d", CHDIMM);
         ss << "], ";
         printReg(ss, _srcRegIdx[0]);
       }else if(OPCODE_LO == 0x11) {
         ss << "CH[";
         printReg(ss, _srcRegIdx[1]);
         ss << "], ";
         printReg(ss, _srcRegIdx[0]);
       }else if(OPCODE_LO == 0x12) {
         printReg(ss, _destRegIdx[0]);
         ss << ", ";
         ss << "CH[";
         ccprintf(ss, "%d", CHSIMM);
         ss << "]";
       }else if(OPCODE_LO == 0x13) {
         printReg(ss, _destRegIdx[0]);
         ss << ", ";
         ss << "CH[";
         printReg(ss, _srcRegIdx[0]);
         ss << "]";
       }else if(OPCODE_LO == 0x14) {
         printReg(ss, _destRegIdx[0]);
         ss << ", ";
         ss << "CH[";
         ccprintf(ss, "%d", CHSIMM);
         ss << "]";
       }else if(OPCODE_LO == 0x15) {
         printReg(ss, _destRegIdx[0]);
         ss << ", ";
         ss << "CH[";
         printReg(ss, _srcRegIdx[0]);
         ss << "]";
       }else {
          printReg(ss, _destRegIdx[0]);
          ss << ", ";
          printReg(ss, _srcRegIdx[0]);
      }
     }else {
        if (_numDestRegs > 0) {
          printReg(ss, _destRegIdx[0]);
        }

        if (_numSrcRegs > 0) {
          ss << ", ";
          printReg(ss, _srcRegIdx[0]);
        }

        if (_numSrcRegs > 1) {
          ss << ", ";
          printReg(ss, _srcRegIdx[1]);
        }
      }

        // Should we define a separate inst. class
        // just for two insts?
        if (strcmp(mnemonic, "sll") == 0 || strcmp(mnemonic, "sra") == 0 || strcmp(mnemonic, "srl") == 0
           || strcmp(mnemonic, "srl_u") == 0  ) {
            ccprintf(ss,", %d", SA);
        }

        return ss.str();
    }

}};

