////////////////////////////////////////////////////////////////////
//
// Bitfield definitions.
//
def bitfield SORM <63:63>;

/////////////////////////////////////////////////////////////
//
// SPU definitions
//
def bitfield NEXTOPCODE <62:60>;
def bitfield OPCODE     <30:23>;
def bitfield OPCODE_HI  <30:28>;
def bitfield OPCODE_LO  <27:23>;

def bitfield RT         <14:10>;
def bitfield RS         <9:5>;
def bitfield RD         <4:0>;
def bitfield RM         <4:0>;  //for += ls

def bitfield DRT        <14:11>;
def bitfield DRS        <9:6>;
def bitfield DRD        <4:1>;

def bitfield FT         <14:10>;
def bitfield FS         <9:5>;
def bitfield FD         <4:0>;

def bitfield JT         <14:10>;
def bitfield JS         <9:5>;
def bitfield JD         <4:0>;
def bitfield JM         <4:0>;  //for += ls

//CSU CH option
def bitfield CHD        <4:0>;
def bitfield CHS        <9:5>;
def bitfield CHDIMM     <4:0>;
def bitfield CHSIMM     <9:5>;
def bitfield CSUSRJ     <18:18>;
def bitfield CSUDRJ     <17:17>;
def bitfield CHNUMS     <9:5>;


//SCU option
def bitfield SCU_T      <18:18>;
def bitfield SCU_U      <21:21>;

//def U option
def bitfield US          <21:21>;

//def DS option
def bitfield SD          <20:19>;

//def ImmTran J/R
def bitfield IMMTRANJR  <17:17>;

//def syscall reg
def bitfield SYSCALLFG  <22:22>;
def bitfield SYSCALLIMM <21:10>;

//def mov J/R
def bitfield MOVJR      <18:17>;

//def shift imm or not
def bitfield SHIFT      <22:22>;
def bitfield SA         <14:10>;

// Branch format
def bitfield IMMB       <21: 5>; // displacement  also for LPTO

def bitfield IMM        <15:5>;
def bitfield IMME       <27:0>;
def bitfield EXTIMM     <59:32>;   //also for LPTO

// Load Store Imm format
def bitfield IMMLS       <20:10>;
def bitfield LSPLUS      <15:15>;
def bitfield LSIMMPLUS   <21:21>;
def bitfield OPCODE_LSIM <27:27>;
def bitfield LSIMDR      <23:23>;
def bitfield LSIMRJ      <22:22>;
def bitfield LSIMBHU     <26:24>;

def bitfield LSDR        <16:16>;
def bitfield LSRJ        <17:17>;
def bitfield LSBHU       <21:19>;
def bitfield SVRS        <0:0>;  //AGU_SVR

// Jmp format
def bitfield JMPTARG    <25: 0>;

//def syn reg

def bitfield CALLMIMM    <22:22>;
def bitfield IMM17       <21:5>;
def bitfield BF          <0:0>;
def bitfield KREGS       <6:0>;
def bitfield KTYPE       <6:4>;
def bitfield RM          <11:7>;
def bitfield DRM         <11:7>;
def bitfield SYN_SHUID   <2>;
def bitfield SYN_SHU0    <1:0>;
def bitfield SYN_SHU1    <1:0>;
def bitfield SYN_SVR     <5>;
def bitfield SYN_BHU     <22:20>;
def bitfield SYN_DR      <19:19>;
def bitfield MCI         <2:0>;
def bitfield RI          <18:14>;
def bitfield SYN_IMM6    <19:14>;

/////////////////////////////////////////////////////////////
//
// MPU definitions
//
def bitfield DEST           <10:0>;
def bitfield BIUDEST        <3:2>;
def bitfield DEST6B         <5:0>;
def bitfield SLOTNUM        <35:32>;
def bitfield MPUOPCODE_LO   <21:18>;
// MR0
def bitfield MR0_EN         <22:22>;
def bitfield MR0_C          <21:21>;
def bitfield MR0_CN         <20:20>;
def bitfield MR0_MS         <19:11>;
// MR1
def bitfield MR1_EN         <19:19>;
def bitfield MR1_C          <18:18>;
def bitfield MR1_CN         <17:17>;
def bitfield MR1_MS         <16:8>;
// MR2
def bitfield MR2_EN         <20:20>;
def bitfield MR2_C          <19:19>;
def bitfield MR2_CN         <18:18>;
def bitfield MR2_W          <17:15>;
def bitfield MR2_MS         <14:8>;
// MR3
def bitfield MR3_EN         <14:14>;
def bitfield MR3_C          <13:13>;
def bitfield MR3_CN         <12:12>;
def bitfield MR3_MS         <10:4>;
def bitfield MRKG           <11:11>;
// SHU
def bitfield SHU_OP        <27:25>;
def bitfield SHU_C         <24:24>;
def bitfield SHU_CN        <23:23>;
def bitfield SHU_TB        <22:22>;
def bitfield SHU_TM        <21:18>;
def bitfield SHU_TN        <17:14>;
def bitfield SHU_IMM3      <13:11>;
// BIU
def bitfield BIU_OP         <19:17>;
def bitfield BIU_C          <16:16>;
def bitfield BIU_CN         <15:15>;
def bitfield BIU_FLAG       <14:11>;
def bitfield BIU_M          <14:14>;
def bitfield BIU_BR         <13:13>;
def bitfield BIU_A          <12:12>;
def bitfield BIU_K          <11:11>;
def bitfield BIU_IND        <0:0>;
// IALU
def bitfield IALU_OP        <30:26>;
def bitfield IALU_C         <25:25>;
def bitfield IALU_CN        <24:24>;
def bitfield IALU2C         <23:23>;
def bitfield IALU_IMM       <22:22>;
def bitfield IALU_FLAG      <21:18>;
def bitfield IALU_T         <21:21>;
def bitfield IALU_U         <20:20>;
def bitfield IALU_B         <19:19>;
def bitfield IALU_H         <18:18>;
def bitfield IALU_TM        <17:16>;
def bitfield IALU_TN        <15:14>;
def bitfield IALU_TP        <13:12>;
def bitfield IALU_IMM5      <15:11>;
// IMAC
def bitfield IMAC_OP        <28:25>;
def bitfield IMAC_C         <24:24>;
def bitfield IMAC_CN        <23:23>;
def bitfield IMAC_FLAG      <22:17>;
def bitfield IMAC_CR        <22:22>;
def bitfield IMAC_L         <21:21>;
def bitfield IMAC_I         <20:20>;
def bitfield IMAC_U         <19:19>;
def bitfield IMAC_B         <18:18>;
def bitfield IMAC_H         <17:17>;
def bitfield IMAC_TM        <16:15>;
def bitfield IMAC_TN        <14:13>;
def bitfield IMAC_TP        <12:11>;
// FALU
def bitfield FALU_OP        <25:21>;
def bitfield FALU_C         <20:20>;
def bitfield FALU_CN        <19:19>;
def bitfield FALU_FLAG      <18:15>;
def bitfield FALU_T         <18:18>;
def bitfield FALU_U         <17:17>;
def bitfield FALU_S         <16:16>;
def bitfield FALU_D         <15:15>;
def bitfield FALU_TM        <14:13>;
def bitfield FALU_TN        <12:11>;
// FMAC
def bitfield FMAC_OP        <23:21>;
def bitfield FMAC_C         <20:20>;
def bitfield FMAC_CN        <19:19>;
def bitfield FMAC_FLAG      <18:17>;
def bitfield FMAC_CRT       <18:18>;
def bitfield FMAC_SD        <17:17>;
def bitfield FMAC_TM        <16:15>;
def bitfield FMAC_TN        <14:13>;
def bitfield FMAC_TP        <12:11>;
// MSEQ
def bitfield MSEQ_OP        <21:18>;
def bitfield MSEQ_IMM10     <17:8>;
def bitfield MSEQ_IMM4      <7:4>;
def bitfield MSEQ_KI        <1:0>;

