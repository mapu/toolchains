////////////////////////////////////////////////////////////////////
//
// Integer operate instructions
//
output header {{
#include <iostream>
    using namespace std;
        /**
         * Base class for integer operations.
         */
        class IntOp : public MapuStaticInst
        {
                protected:

                /// Constructor
                IntOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :
                                MapuStaticInst(mnem, _machInst, __opClass)
                {
                }

                std::string generateDisassembly(Addr pc, const SymbolTable *symtab) const;
        };

        class IntCIOp : public MapuStaticInst
        {
                protected:

                /// Constructor
                IntCIOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :
                                MapuStaticInst(mnem, _machInst, __opClass)
                {
                }

                std::string generateDisassembly(Addr pc, const SymbolTable *symtab) const;
        };


        class IntImmOp : public MapuStaticInst
        {
                protected:

                int16_t imm;
                int32_t sextImm;
                uint32_t zextImm;
                uint16_t immd;
                uint64_t extImm;
              

                /// Constructor
                IntImmOp(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :
                    MapuStaticInst(mnem, _machInst, __opClass),imm(IMM),
                    sextImm(IMM),zextImm(0x0000FFFF & IMM),immd(RD),extImm(EXTIMM)
                {
                    //If Bit 15 is 1 then Sign Extend
                    int32_t temp = sextImm & 0x00008000;
                    if (temp > 0 && strcmp(mnemonic,"lui") != 0) {
                        sextImm |= 0xFFFF0000;
                    }
                }

                std::string generateDisassembly(Addr pc, const SymbolTable *symtab) const;


        };


}};


//Outputs to decoder.cc
output decoder {{
        std::string IntCIOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const
        {
            std::stringstream ss;

            ccprintf(ss, "%-10s ", mnemonic);

            // just print the first dest... if there's a second one,
            // it's generally implicit
            if ( (strcmp(mnemonic,"addci_t") == 0) || (strcmp(mnemonic,"subci_t") == 0) ) {
                if (_numDestRegs > 0) {
                  printReg(ss, _destRegIdx[1]);
                }

                  ss << ", ";
                  printReg(ss, _srcRegIdx[1]);
                  ss << ", ";
                  printReg(ss, _srcRegIdx[2]);
             }else{
                if (_numDestRegs > 0) {
                  printReg(ss, _destRegIdx[1]);
                }

                ss << ", ";

                if (_numSrcRegs > 0) {
                  printReg(ss, _srcRegIdx[0]);
                }

                if (_numSrcRegs > 1) {
                  ss << ", ";
                  printReg(ss, _srcRegIdx[1]);
                }
              }
            return ss.str();
        }



        std::string IntOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const
        {
            std::stringstream ss;

            ccprintf(ss, "%-10s ", mnemonic);

           
            if (OPCODE_HI == 0x3) {
              if((OPCODE_LO >= 0x4) && (OPCODE_LO <= 0x7)){
                if (_numDestRegs > 0) {
                  printReg(ss, _destRegIdx[0]);
                }

                ss << ", ";

                if (_numSrcRegs > 0) {
                  printReg(ss, _srcRegIdx[0]);
                }

                if (_numSrcRegs > 1) {
                  ss << ", ";
                  printReg(ss, _srcRegIdx[1]);
                }
              }
            }
            
            else {
              if (_numDestRegs > 0) {
                printReg(ss, _destRegIdx[0]);
                ss << ", ";
              }
              if (_numSrcRegs > 0) {
                printReg(ss, _srcRegIdx[0]);
              }

              if (_numSrcRegs > 1) {
                ss << ", ";
                printReg(ss, _srcRegIdx[1]);
              }
            }   


            return ss.str();
        }

        std::string IntImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const
        {
            std::stringstream ss;

            //ccprintf(ss, "%-10s ", mnemonic);
            
            /*if ( strcmp(mnemonic,"immtranse") == 0 ) {
              ccprintf(ss, "%-10s 0x%x", mnemonic,
                        IMME);
            }*/

            if ( (strcmp(mnemonic,"immtransr") == 0) || (strcmp(mnemonic,"immtransj") == 0)) {
              ccprintf(ss, "%-10s ", mnemonic);
              
              if (_numDestRegs > 0) printReg(ss, _destRegIdx[0]);

              ss << ", ";

              if (_numSrcRegs > 0) {
                printReg(ss, _srcRegIdx[0]);
                ss << ", ";
              }
              int32_t temp; 
              if( (imm >> 10) == 1) temp = imm | 0xFFFFF800;
              else                  temp = imm;
              ss << (int) ((extImm << 4) | temp);
            }

            else if(strcmp(mnemonic,"lui") == 0)
                ccprintf(ss, "0x%x ", sextImm);


            return ss.str();
        }

}};

def format IntOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'IntOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = RegNopCheckDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};

def format IntCIOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'IntCIOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = RegNopCheckDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};


def format IntImmOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'IntImmOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = ImmNopCheckDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};
