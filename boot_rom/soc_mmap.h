/*
 * soc_mmap.h
 *
 *  Created on: Jan 15, 2014
 *      Author: wangl
 */

#ifndef SOC_MMAP_H_
#define SOC_MMAP_H_

#include "intr_ctrl.h"
enum SOC_MMAP {
  NORFLASH_START = 0x0,
  NORFLASH_END   = 0x1FFFFFFF,
  SRAM_START     = 0x20000000,
  SRAM_END       = 0x3FFFFFFF,
  INTSRAM_START  = 0x40000000,
  INTSRAM_END    = 0x4000FFFF,
  SHAREMEM_START = 0x40400000,
  SHAREMEM_END   = 0x407FFFFF,
  SMC_REG_START  = 0x40800000,
  SMC_REG_END    = 0x4080FFFF,
  APE0_REG_START = 0x41000000,
  APE0_REG_END   = 0x4100FFFF,
  APE1_REG_START = 0x41400000,
  APE1_REG_END   = 0x4140FFFF,
  APE2_REG_START = 0x41800000,
  APE2_REG_END   = 0x4180FFFF,
  APE3_REG_START = 0x41C00000,
  APE3_REG_END   = 0x41C0FFFF,
  APE4_REG_START = 0x42000000,
  APE4_REG_END   = 0x4200FFFF,
  APE5_REG_START = 0x42400000,
  APE5_REG_END   = 0x4240FFFF,
  APE6_REG_START = 0x42800000,
  APE6_REG_END   = 0x4280FFFF,
  APE7_REG_START = 0x42C00000,
  APE7_REG_END   = 0x42C0FFFF,
  ETH_10G_START  = 0x45000000,
  ETH_10G_END    = 0x453FFFFF,
  USB3_0_START   = 0x45400000,
  USB3_0_END     = 0x457FFFFF,
  EXT_SLV_START  = 0x45800000,
  EXT_SLV_END    = 0x4580FFFF,
  EMC_BK0_START  = 0x48000000,
  EMC_BK0_END    = 0x49FFFFFF,
  EMC_BK1_START  = 0x4A000000,
  EMC_BK1_END    = 0x4BFFFFFF,
  EMC_BK2_START  = 0x4C000000,
  EMC_BK2_END    = 0x4DFFFFFF,
  EMC_BK3_START  = 0x4E000000,
  EMC_BK3_END    = 0x4FFFFFFF,
  DMA_CTRL_START = 0x50000000,
  DMA_CTRL_END   = 0x500FFFFF,
  GPMC_REG_START = 0x50240000,  // General Purpose Memory Controller
  GPMC_REG_END   = 0x5027FFFF,
  SYS_CONF_START = 0x50300000,
  SYS_CONF_END   = 0x5033FFFF,
  PRCM_START     = 0x50340000,  // Power, Reset, Clock Management
  PRCM_END       = 0x5035FFFF,
  PHY0_START     = 0x50360000,  // Power, Reset, Clock Management
  PHY0_END       = 0x5036FFFF,
  PHY1_START     = 0x50370000,  // Power, Reset, Clock Management
  PHY1_END       = 0x5037FFFF,
  SYS_DBG_START  = 0x50380000,
  SYS_DBG_END    = 0x503BFFFF,
#ifndef GIC
  INTRCTRL_START = 0x503C0000,
  INTRCTRL_END   = 0x503FFFFF,
#endif
  TIMER_START    = 0x50400000,
  TIMER_END      = 0x5043FFFF,
  WDT_START      = 0x50440000, // Watch dog timer
  WDT_END        = 0x5047FFFF,
  RTC_START      = 0x50480000, // Real-time clock
  RTC_END        = 0x504BFFFF,
  REMAP_START    = 0x504C0000,
  REMAP_END      = 0x504FFFFF,
  VIDEO_IF_START = 0x50500000,
  VIDEO_IF_END   = 0x5053FFFF,
  GPIO_START     = 0x50800000,
  GPIO_END       = 0x5083FFFF,
  UART0_START    = 0x50900000,
  UART0_END      = 0x5090FFFF,
  UART1_START    = 0x50910000,
  UART1_END      = 0x5091FFFF,
  I2C0_START     = 0x50A00000,
  I2C0_END       = 0x50A0FFFF,
  I2C1_START     = 0x50A10000,
  I2C1_END       = 0x50A1FFFF,
  I2C2_START     = 0x50A20000,
  I2C2_END       = 0x50A2FFFF,
  I2C3_START     = 0x50A30000,
  I2C3_END       = 0x50A3FFFF,
  I2S0_START     = 0x50B00000,
  I2S0_END       = 0x50B0FFFF,
  I2S1_START     = 0x50B10000,
  I2S1_END       = 0x50B1FFFF,
  GMAC_CSR_START = 0x50C00000,
  GMAC_CSR_END   = 0x50C0FFFF,
  SD_CTRL_START  = 0x50D00000,
  SD_CTRL_END    = 0x50D0FFFF,
  SPI_START      = 0x51000000,
  SPI_END        = 0x53FFFFFF,
  RIO0_REG_START = 0x54700000,
  RIO0_REG_END   = 0x5471FFFF,
  RIO1_REG_START = 0x54720000,
  RIO1_REG_END   = 0x5473FFFF,
#ifdef GIC
  GIC_CPU_START  = 0x547F0000,
  GIC_CPU_END    = 0x547F0FFF,
  GIC_DIST_START = 0x547F1000,
  GIC_DIST_END   = 0x547F1FFF,
#endif
  DDRCTRL0_START = 0x54800000,  // System DDR3 controller
  DDRCTRL0_END   = 0x548FFFFF,
  DDRCTRL1_START = 0x54A00000,  // Cluster 0 DDR3 controller
  DDRCTRL1_END   = 0x54AFFFFF,
  DDRCTRL2_START = 0x54B00000,  // Cluster 1 DDR3 controller
  DDRCTRL2_END   = 0x54BFFFFF,
  DDR0_START     = 0x60000000,
  DDR0_SHR_START = 0x70000000,  // Reserved from Virtual Memory Management
  DDR0_END       = 0x7FFFFFFF,
  DDR1_START     = 0x80000000,
  DDR1_END       = 0xBFFFFFFF,
  DDR2_START     = 0xC0000000,
  DDR2_END       = 0xFFFFFFFF,
};

#ifdef GIC
#define INTR_BASE 32
#else
#define INTR_BASE 0
#endif
enum SOC_INTR_TABLE {
  INTR_GMAC = INTR_BASE,
  INTR_RTC,
  INTR_UART0,
  INTR_UART1,
  INTR_DMACTRL,
  INTR_DDRCTRL,
  INTR_SPI0,
  INTR_SPI1,
  INTR_TIMERS = INTR_BASE + 8,
  INTR_GPIO = INTR_BASE + 16,
  INTR_I2C0 = INTR_BASE + 24,
  INTR_I2C1,
  INTR_I2C2,
  INTR_I2C3,
  INTR_I2S0,
  INTR_I2S1,
  INTR_WATCHDOG,
  INTR_SDC,
  INTR_DMAEXTERR,
  INTR_DMA,
  INTR_DMAS,
  INTR_PMU,
  INTR_CAMERA,
  INTR_DISPLAY,
  INTR_DDR0CTRL,
  INTR_DDR1CTRL,
  INTR_RIO0,
  INTR_RIO1,
  INTR_APE0,
  INTR_APE0MAIL,
  INTR_APE1,
  INTR_APE1MAIL,
  INTR_APE2,
  INTR_APE2MAIL,
  INTR_APE3,
  INTR_APE3MAIL,
  INTR_PMT,
  INTR_ARMCTI,
  INTR_PCIE0,
  INTR_PCIE1,
  INTR_CODA,
  INTR_JPEG,
  NUM_INTR = INTR_BASE + 128,
};

#endif /* SOC_MMAP_H_ */
