/*
 * lowlevel_init.c
 *
 *  Created on: Jan 15, 2014
 *      Author: wangl
 */

#include <stdint.h>
#include "soc_mmap.h"
#include "intr_ctrl.h"
#include "dma_ctrl.h"

extern unsigned int MaPU_Default_IRQ_handler;
extern void wait();

#define PHY0
#if defined(PHY0) || defined(PHY1)
#define NEED_PHY
#endif

#ifdef NEED_PHY
void initPHY();
void initPHY() {
  volatile unsigned int *phy_base;
#  ifdef PHY0
  phy_base = (unsigned int *)PHY0_START;
  phy_base[0x6030 / 4] = 0x2; // mode_sel
  phy_base[0x6000 / 4] = 0x001FFFFF; // phy_en
#  endif

#  ifdef PHY1
  phy_base = (unsigned int *)PHY1_START;
  phy_base[0x6030 / 4] = 0x2; // mode_sel
  phy_base[0x6000 / 4] = 0x001FFFFF; // phy_en
#  endif
}
#endif

#define NEED_DDR0
#define NEED_DDR1
#define NEED_DDR2
#if defined(NEED_DDR0) || defined(NEED_DDR1) || defined(NEED_DDR2)
#  define NEED_DDR
#endif
#ifdef NEED_DDR
static const unsigned int DDR_PHY_CONF[140] = {
  0x00000412, // DEN_PHY_DQ_TIMING_REG_0:RW:0:32:=0x00000412
  0x00000414, // DEN_PHY_DQS_TIMING_REG_0:RW:0:32:=0x00000414
  0x00010088, // DEN_PHY_GATE_LPBK_CTRL_REG_0:RW:0:32:=0x00010088
  0x00000004, // DEN_PHY_READ_CTRL_REG_0:RW:0:32:=0x00000004
  0x0a120024, // PHY_DLL_MASTER_CTRL_REG_0:RW:0:32:=0x0a120024
  0x40404040, // PHY_DLL_SLAVE_CTRL_REG_0:RW:0:32:=0x40404040
  0x00000000, // DEN_PHY_OBS_REG_0_0:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_0_0:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_1_0:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_2_0:RD:0:32:=0x00000000
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000412, // DEN_PHY_DQ_TIMING_REG_1:RW:0:32:=0x00000412
  0x00000414, // DEN_PHY_DQS_TIMING_REG_1:RW:0:32:=0x00000414
  0x00010088, // DEN_PHY_GATE_LPBK_CTRL_REG_1:RW:0:32:=0x00010088
  0x00000004, // DEN_PHY_READ_CTRL_REG_1:RW:0:32:=0x00000004
  0x0a120024, // PHY_DLL_MASTER_CTRL_REG_1:RW:0:32:=0x0a120024
  0x40404040, // PHY_DLL_SLAVE_CTRL_REG_1:RW:0:32:=0x40404040
  0x00000000, // DEN_PHY_OBS_REG_0_1:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_0_1:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_1_1:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_2_1:RD:0:32:=0x00000000
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000412, // DEN_PHY_DQ_TIMING_REG_2:RW:0:32:=0x00000412
  0x00000414, // DEN_PHY_DQS_TIMING_REG_2:RW:0:32:=0x00000414
  0x00010088, // DEN_PHY_GATE_LPBK_CTRL_REG_2:RW:0:32:=0x00010088
  0x00000004, // DEN_PHY_READ_CTRL_REG_2:RW:0:32:=0x00000004
  0x0a120024, // PHY_DLL_MASTER_CTRL_REG_2:RW:0:32:=0x0a120024
  0x40404040, // PHY_DLL_SLAVE_CTRL_REG_2:RW:0:32:=0x40404040
  0x00000000, // DEN_PHY_OBS_REG_0_2:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_0_2:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_1_2:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_2_2:RD:0:32:=0x00000000
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000412, // DEN_PHY_DQ_TIMING_REG_3:RW:0:32:=0x00000412
  0x00000414, // DEN_PHY_DQS_TIMING_REG_3:RW:0:32:=0x00000414
  0x00010088, // DEN_PHY_GATE_LPBK_CTRL_REG_3:RW:0:32:=0x00010088
  0x00000004, // DEN_PHY_READ_CTRL_REG_3:RW:0:32:=0x00000004
  0x0a120024, // PHY_DLL_MASTER_CTRL_REG_3:RW:0:32:=0x0a120024
  0x40404040, // PHY_DLL_SLAVE_CTRL_REG_3:RW:0:32:=0x40404040
  0x00000000, // DEN_PHY_OBS_REG_0_3:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_0_3:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_1_3:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_2_3:RD:0:32:=0x00000000
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000412, // DEN_PHY_DQ_TIMING_REG_4:RW:0:32:=0x00000412
  0x00000414, // DEN_PHY_DQS_TIMING_REG_4:RW:0:32:=0x00000414
  0x00010088, // DEN_PHY_GATE_LPBK_CTRL_REG_4:RW:0:32:=0x00010088
  0x00000004, // DEN_PHY_READ_CTRL_REG_4:RW:0:32:=0x00000004
  0x0a120024, // PHY_DLL_MASTER_CTRL_REG_4:RW:0:32:=0x0a120024
  0x40404040, // PHY_DLL_SLAVE_CTRL_REG_4:RW:0:32:=0x40404040
  0x00000000, // DEN_PHY_OBS_REG_0_4:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_0_4:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_1_4:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_2_4:RD:0:32:=0x00000000
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000412, // DEN_PHY_DQ_TIMING_REG_5:RW:0:32:=0x00000412
  0x00000414, // DEN_PHY_DQS_TIMING_REG_5:RW:0:32:=0x00000414
  0x00010088, // DEN_PHY_GATE_LPBK_CTRL_REG_5:RW:0:32:=0x00010088
  0x00000004, // DEN_PHY_READ_CTRL_REG_5:RW:0:32:=0x00000004
  0x0a120024, // PHY_DLL_MASTER_CTRL_REG_5:RW:0:32:=0x0a120024
  0x40404040, // PHY_DLL_SLAVE_CTRL_REG_5:RW:0:32:=0x40404040
  0x00000000, // DEN_PHY_OBS_REG_0_5:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_0_5:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_1_5:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_2_5:RD:0:32:=0x00000000
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000412, // DEN_PHY_DQ_TIMING_REG_6:RW:0:32:=0x00000412
  0x00000414, // DEN_PHY_DQS_TIMING_REG_6:RW:0:32:=0x00000414
  0x00010088, // DEN_PHY_GATE_LPBK_CTRL_REG_6:RW:0:32:=0x00010088
  0x00000004, // DEN_PHY_READ_CTRL_REG_6:RW:0:32:=0x00000004
  0x0a120024, // PHY_DLL_MASTER_CTRL_REG_6:RW:0:32:=0x0a120024
  0x40404040, // PHY_DLL_SLAVE_CTRL_REG_6:RW:0:32:=0x40404040
  0x00000000, // DEN_PHY_OBS_REG_0_6:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_0_6:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_1_6:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_2_6:RD:0:32:=0x00000000
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000412, // DEN_PHY_DQ_TIMING_REG_7:RW:0:32:=0x00000412
  0x00000414, // DEN_PHY_DQS_TIMING_REG_7:RW:0:32:=0x00000414
  0x00010088, // DEN_PHY_GATE_LPBK_CTRL_REG_7:RW:0:32:=0x00010088
  0x00000004, // DEN_PHY_READ_CTRL_REG_7:RW:0:32:=0x00000004
  0x0a120024, // PHY_DLL_MASTER_CTRL_REG_7:RW:0:32:=0x0a120024
  0x40404040, // PHY_DLL_SLAVE_CTRL_REG_7:RW:0:32:=0x40404040
  0x00000000, // DEN_PHY_OBS_REG_0_7:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_0_7:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_1_7:RD:0:32:=0x00000000
  0x00000000, // PHY_DLL_OBS_REG_2_7:RD:0:32:=0x00000000
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00000000, //
  0x00001006, // DEN_PHY_CTRL_REG:RW:0:32:=0x00001006
  0xFEFEFEFE, // DEN_PHY_PAD_TSEL_REG:RW:0:32:=0xFEFEFEFE
  0x00000000, // PHY_PAD_DRIVE_REG_0:RW:0:32:=0x00000000
  0x00000000, // PHY_PAD_DRIVE_REG_1:RW_D+:0:32:=0x00000000
  0x00000000, // PHY_PAD_DRIVE_REG_2:RW:0:32:=0x00000000
  0xFEFEFEFE, // PHY_PAD_TERM_REG_0:RW_D+:0:32:=0xFEFEFEFE
  0xFEFEFEFE, // PHY_PAD_TERM_REG_1:RW_D+:0:32:=0xFEFEFEFE
  0x00000000, // PHY_TSMC_PVT_CFG_REG_AC_0:RW:0:3:=0x00
  0x01000100, // PHY_TSMC_PVT_CFG_REG_AC_1:RW:0:32:=0x01000100
  0x00000000, // PHY_TSMC_PVT_INTERVAL_REG_AC_0:RW:0:32:=0x00000000
  0x00000000, // PHY_TSMC_PVT_INTERVAL_REG_AC_1:RW:0:18:=0x000000
  0x00000000, // PHY_TSMC_PVT_OBS_REG_AC_0:RD:16:10:=0x0000 PHY_TSMC_PVT_OVR_REG_AC_0:RW:0:10:=0x0000
};
static const unsigned int DDR_CTRL_CONF[162] = {
  0x00000600, // VERSION:RD:16:16:=0x0000 DRAM_CLASS:RW:8:4:=0x06 START:RW:0:1:=0x00
  0x00000000, // MAX_CS_REG:RD:16:2:=0x00 MAX_COL_REG:RD:8:4:=0x00 MAX_ROW_REG:RD:0:5:=0x00
  0x00000004, // TINIT:RW:0:24:=0x000004
  0x00000050, // TRST_PWRON:RW:0:32:=0x00000050
  0x000000c8, // CKE_INACTIVE:RW:0:32:=0x000000c8
  0x0400050c, // TBST_INT_INTERVAL:RW:24:3:=0x04 ADDITIVE_LAT:RW:16:5:=0x00 WRLAT:RW:8:5:=0x05 CASLAT_LIN:RW:0:6:=0x0c
  0x0f140404, // TRAS_MIN:RW:24:8:=0x0f TRC:RW:16:8:=0x14 TRRD:RW:8:8:=0x04 TCCD:RW:0:5:=0x04
  0x04120604, // TRTP:RW:24:4:=0x04 TFAW:RW:16:8:=0x12 TRP:RW:8:8:=0x06 TWTR:RW:0:6:=0x04
  0x00000c04, // TMOD:RW:8:8:=0x0c TMRD:RW:0:5:=0x04
  0x03006db0, // TCKE:RW:24:3:=0x03 TRAS_MAX:RW:0:17:=0x006db0
  0x06060003, // TWR:RW:24:6:=0x06 TRCD:RW:16:8:=0x06 WRITEINTERP:RW:8:1:=0x00 TCKESR:RW:0:8:=0x03
  0x0c010100, // TDAL:RW:24:6:=0x0c TRAS_LOCKOUT:RW:16:1:=0x01 CONCURRENTAP:RW:8:1:=0x01 AP:RW:0:1:=0x00
  0x00000603, // ADDRESS_MIRRORING:RW:24:2:=0x00 REG_DIMM_ENABLE:RW:16:1:=0x00 TRP_AB:RW:8:8:=0x06 BSTLEN:RW_D:0:3:=0x03
  0x00010000, // TREF_ENABLE:RW:16:1:=0x01 RESERVED:RW:8:1:=0x00 AREFRESH:WR:0:1:=0x00
  0x0c280040, // TREF:RW:16:14:=0x0c28 TRFC:RW:0:10:=0x0040
  0x00000300, // TPDEX:RW:8:16:=0x0003
  0x0200000a, // TXSR:RW:16:16:=0x0200 TXPDLL:RW:0:16:=0x000a
  0x00000044, // SREFRESH_EXIT_NO_REFRESH:RW:24:1:=0x00 PWRUP_SREFRESH_EXIT:RW:16:1:=0x00 TXSNR:RW:0:16:=0x0044
  0x05000001, // CKSRE:RW:24:8:=0x05 LOWPOWER_REFRESH_ENABLE:RW:16:2:=0x00 CKE_DELAY:RW:8:3:=0x00 ENABLE_QUICK_SREFRESH:RW:0:1:=0x01
  0x00000005, // LP_ARB_STATE:RD:24:4:=0x00 LP_STATE:RD:16:6:=0x00 LP_CMD:WR:8:8:=0x00 CKSRX:RW:0:8:=0x05
  0x00000000, // LP_AUTO_MEM_GATE_EN:RW:16:2:=0x00 LP_AUTO_EXIT_EN:RW:8:3:=0x00 LP_AUTO_ENTRY_EN:RW:0:3:=0x00
  0x00000000, // LP_AUTO_SR_MC_GATE_IDLE:RW:24:8:=0x00 LP_AUTO_SR_IDLE:RW:16:8:=0x00 LP_AUTO_PD_IDLE:RW:0:12:=0x0000
  0x00000000, // RESERVED:RW:0:7:=0x00
  0x00000000, // WRITE_MODEREG:RW+:0:26:=0x00000000
  0x00042000, // MR0_DATA_0:RW:8:16:=0x0420 MRW_STATUS:RD:0:8:=0x00
  0x00000046, // MR2_DATA_0:RW:16:16:=0x0000 MR1_DATA_0:RW:0:16:=0x0046
  0x00000000, // MR3_DATA_0:RW:16:16:=0x0000 MRSINGLE_DATA_0:RW:0:16:=0x0000
  0x00460420, // MR1_DATA_1:RW:16:16:=0x0046 MR0_DATA_1:RW:0:16:=0x0420
  0x00000000, // MRSINGLE_DATA_1:RW:16:16:=0x0000 MR2_DATA_1:RW:0:16:=0x0000
  0x00000000, // BIST_RESULT:RD:24:2:=0x00 BIST_GO:WR:16:1:=0x00 MR3_DATA_1:RW:0:16:=0x0000
  0x00010100, // BIST_ADDR_CHECK:RW:16:1:=0x01 BIST_DATA_CHECK:RW:8:1:=0x01 ADDR_SPACE:RW:0:6:=0x00
  0x00000000, // BIST_START_ADDRESS:RW:0:34:=0x00000000
  0x00000000, // BIST_START_ADDRESS:RW:0:34:=0x00
  0x00000000, // BIST_DATA_MASK:RW:0:128:=0x00000000
  0x00000000, // BIST_DATA_MASK:RW:0:128:=0x00000000
  0x00000000, // BIST_DATA_MASK:RW:0:128:=0x00000000
  0x00000000, // BIST_DATA_MASK:RW:0:128:=0x00000000
  0x01000200, // ZQCL:RW:16:12:=0x0100 ZQINIT:RW_D:0:12:=0x0200
  0x02000040, // ZQ_ON_SREF_EXIT:RW:24:2:=0x02 ZQ_REQ:WR:16:2:=0x00 ZQCS:RW:0:12:=0x0040
  0x00000000, //
  0x02000100, // ROW_DIFF:RW:24:3:=0x02 RESERVED:RW:16:2:=0x00 ZQCS_ROTATE:RW:8:1:=0x01 ZQ_IN_PROGRESS:RD:0:1:=0x00
  0xffff0a01, // COMMAND_AGE_COUNT:RW:24:8:=0xff AGE_COUNT:RW:16:8:=0xff APREBIT:RW_D:8:4:=0x0a COL_DIFF:RW:0:4:=0x01
  0x01010101, // PRIORITY_EN:RW:24:1:=0x01 PLACEMENT_EN:RW:16:1:=0x01 BANK_SPLIT_EN:RW:8:1:=0x01 ADDR_CMP_EN:RW:0:1:=0x01
  0x01010101, // W2R_SPLIT_EN:RW:24:1:=0x01 CS_SAME_EN:RW:16:1:=0x01 RW_SAME_PAGE_EN:RW:8:1:=0x01 RW_SAME_EN:RW:0:1:=0x01
  0x00010b01, // DISABLE_RD_INTERLEAVE:RW:24:1:=0x00 SWAP_EN:RW:16:1:=0x01 NUM_Q_ENTRIES_ACT_DISABLE:RW:8:4:=0x0b DISABLE_RW_GROUP_W_BNK_CONFLICT:RW:0:2:=0x01
  0x000c0300, // REDUC:RW:24:1:=0x00 BURST_ON_FLY_BIT:RW:16:4:=0x0c CS_MAP:RW:8:2:=0x03 INHIBIT_DRAM_CMD:RW:0:1:=0x00
  0x00000000, // CTRLUPD_REQ:WR:24:1:=0x00 CONTROLLER_BUSY:RD:16:1:=0x00 IN_ORDER_ACCEPT:RW:8:1:=0x00 Q_FULLNESS:RW:0:4:=0x00
  0x00000001, // INT_STATUS:RD:8:18:=0x000000 CTRLUPD_REQ_PER_AREF_EN:RW:0:1:=0x01
  0x00000000, // INT_ACK:WR:0:17:=0x000000
  0x00000000, // INT_MASK:RW:0:18:=0x000000
  0x00000000, // OUT_OF_RANGE_ADDR:RD:0:34:=0x00000000
  0x00000000, // OUT_OF_RANGE_TYPE:RD:16:7:=0x00 OUT_OF_RANGE_LENGTH:RD:8:8:=0x00 OUT_OF_RANGE_ADDR:RD:0:34:=0x00
  0x00000000, // OUT_OF_RANGE_SOURCE_ID:RD:0:11:=0x0000
  0x00000000, // BIST_EXP_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_EXP_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_EXP_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_EXP_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_EXP_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_EXP_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_EXP_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_EXP_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_FAIL_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_FAIL_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_FAIL_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_FAIL_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_FAIL_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_FAIL_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_FAIL_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_FAIL_DATA:RD:0:256:=0x00000000
  0x00000000, // BIST_FAIL_ADDR:RD:0:34:=0x00000000
  0x00000000, // BIST_FAIL_ADDR:RD:0:34:=0x00
  0x00000000, // PORT_CMD_ERROR_ADDR:RD:0:34:=0x00000000
  0x00000000, // PORT_CMD_ERROR_TYPE:RD:24:2:=0x00 PORT_CMD_ERROR_ID:RD:8:11:=0x0000 PORT_CMD_ERROR_ADDR:RD:0:34:=0x00
  0x02010102, // ODT_WR_MAP_CS1:RW:24:2:=0x02 ODT_RD_MAP_CS1:RW:16:2:=0x01 ODT_WR_MAP_CS0:RW:8:2:=0x01 ODT_RD_MAP_CS0:RW:0:2:=0x02
  0x01060604, // ODT_EN:RW:24:1:=0x01 TODTH_RD:RW:16:4:=0x06 TODTH_WR:RW:8:4:=0x06 TODTL_2CMD:RW:0:8:=0x04
  0x00000000, //
  0x02020202, // W2W_DIFFCS_DLY:RW_D:24:5:=0x02 W2R_DIFFCS_DLY:RW_D:16:5:=0x02 R2W_DIFFCS_DLY:RW_D:8:5:=0x02 R2R_DIFFCS_DLY:RW_D:0:5:=0x02
  0x00000200, // W2W_SAMECS_DLY:RW:24:5:=0x00 W2R_SAMECS_DLY:RW:16:5:=0x00 R2W_SAMECS_DLY:RW_D:8:5:=0x02 R2R_SAMECS_DLY:RW:0:5:=0x00
  0x00000000, // SWLVL_EXIT:WR:24:1:=0x00 SWLVL_START:WR:16:1:=0x00 SWLVL_LOAD:WR:8:1:=0x00 SW_LEVELING_MODE:RW:0:3:=0x00
  0x00000000, // SWLVL_RESP_1:RD:24:8:=0x00 SWLVL_RESP_0:RD:16:8:=0x00 LVL_STATUS:RD:8:4:=0x00 SWLVL_OP_DONE:RD:0:1:=0x00
  0x00000000, // SWLVL_RESP_5:RD:24:8:=0x00 SWLVL_RESP_4:RD:16:8:=0x00 SWLVL_RESP_3:RD:8:8:=0x00 SWLVL_RESP_2:RD:0:8:=0x00
  0x00000000, // WRLVL_CS:RW:24:1:=0x00 WRLVL_REQ:WR:16:1:=0x00 SWLVL_RESP_7:RD:8:8:=0x00 SWLVL_RESP_6:RD:0:8:=0x00
  0x0000280d, // WRLVL_EN:RW:16:1:=0x00 WLMRD:RW:8:6:=0x28 WLDQSEN:RW:0:6:=0x0d
  0x00000000, // WRLVL_INTERVAL:RW:0:16:=0x0000
  0x00000000, // WRLVL_REG_EN:RW:24:1:=0x00 WRLVL_ERROR_STATUS:RD:0:18:=0x000000
  0x00000000, // WRLVL_DELAY_1:RW+:16:16:=0x0000 WRLVL_DELAY_0:RW+:0:16:=0x0000
  0x00000000, // WRLVL_DELAY_3:RW+:16:16:=0x0000 WRLVL_DELAY_2:RW+:0:16:=0x0000
  0x00000000, // WRLVL_DELAY_5:RW+:16:16:=0x0000 WRLVL_DELAY_4:RW+:0:16:=0x0000
  0x00000000, // WRLVL_DELAY_7:RW+:16:16:=0x0000 WRLVL_DELAY_6:RW+:0:16:=0x0000
  0x00000000, // RDLVL_EDGE:RW:24:1:=0x00 RDLVL_CS:RW:16:1:=0x00 RDLVL_GATE_REQ:WR:8:1:=0x00 RDLVL_REQ:WR:0:1:=0x00
  0x00000000, // RDLVL_GATE_REG_EN:RW:16:1:=0x00 RDLVL_REG_EN:RW:8:1:=0x00 RDLVL_BEGIN_DELAY_EN:RW:0:1:=0x00
  0x00000000, // RDLVL_END_DELAY_0:RD:16:16:=0x0000 RDLVL_BEGIN_DELAY_0:RD:0:16:=0x0000
  0x00000000, // RDLVL_OFFSET_DELAY_0:RW:16:16:=0x0000 RDLVL_MIDPOINT_DELAY_0:RD:0:16:=0x0000
  0x00404000, // RDLVL_DELAY_0:RW:8:16:=0x4040 RDLVL_OFFSET_DIR_0:RW:0:1:=0x00
  0x00000000, // RDLVL_BEGIN_DELAY_1:RD:16:16:=0x0000 RDLVL_GATE_DELAY_0:RW+:0:16:=0x0000
  0x00000000, // RDLVL_MIDPOINT_DELAY_1:RD:16:16:=0x0000 RDLVL_END_DELAY_1:RD:0:16:=0x0000
  0x00000000, // RDLVL_OFFSET_DIR_1:RW:16:1:=0x00 RDLVL_OFFSET_DELAY_1:RW:0:16:=0x0000
  0x00004040, // RDLVL_GATE_DELAY_1:RW+:16:16:=0x0000 RDLVL_DELAY_1:RW:0:16:=0x4040
  0x00000000, // RDLVL_END_DELAY_2:RD:16:16:=0x0000 RDLVL_BEGIN_DELAY_2:RD:0:16:=0x0000
  0x00000000, // RDLVL_OFFSET_DELAY_2:RW:16:16:=0x0000 RDLVL_MIDPOINT_DELAY_2:RD:0:16:=0x0000
  0x00404000, // RDLVL_DELAY_2:RW:8:16:=0x4040 RDLVL_OFFSET_DIR_2:RW:0:1:=0x00
  0x00000000, // RDLVL_BEGIN_DELAY_3:RD:16:16:=0x0000 RDLVL_GATE_DELAY_2:RW+:0:16:=0x0000
  0x00000000, // RDLVL_MIDPOINT_DELAY_3:RD:16:16:=0x0000 RDLVL_END_DELAY_3:RD:0:16:=0x0000
  0x00000000, // RDLVL_OFFSET_DIR_3:RW:16:1:=0x00 RDLVL_OFFSET_DELAY_3:RW:0:16:=0x0000
  0x00004040, // RDLVL_GATE_DELAY_3:RW+:16:16:=0x0000 RDLVL_DELAY_3:RW:0:16:=0x4040
  0x00000000, // RDLVL_END_DELAY_4:RD:16:16:=0x0000 RDLVL_BEGIN_DELAY_4:RD:0:16:=0x0000
  0x00000000, // RDLVL_OFFSET_DELAY_4:RW:16:16:=0x0000 RDLVL_MIDPOINT_DELAY_4:RD:0:16:=0x0000
  0x00404000, // RDLVL_DELAY_4:RW:8:16:=0x4040 RDLVL_OFFSET_DIR_4:RW:0:1:=0x00
  0x00000000, // RDLVL_BEGIN_DELAY_5:RD:16:16:=0x0000 RDLVL_GATE_DELAY_4:RW+:0:16:=0x0000
  0x00000000, // RDLVL_MIDPOINT_DELAY_5:RD:16:16:=0x0000 RDLVL_END_DELAY_5:RD:0:16:=0x0000
  0x00000000, // RDLVL_OFFSET_DIR_5:RW:16:1:=0x00 RDLVL_OFFSET_DELAY_5:RW:0:16:=0x0000
  0x00004040, // RDLVL_GATE_DELAY_5:RW+:16:16:=0x0000 RDLVL_DELAY_5:RW:0:16:=0x4040
  0x00000000, // RDLVL_END_DELAY_6:RD:16:16:=0x0000 RDLVL_BEGIN_DELAY_6:RD:0:16:=0x0000
  0x00000000, // RDLVL_OFFSET_DELAY_6:RW:16:16:=0x0000 RDLVL_MIDPOINT_DELAY_6:RD:0:16:=0x0000
  0x00404000, // RDLVL_DELAY_6:RW:8:16:=0x4040 RDLVL_OFFSET_DIR_6:RW:0:1:=0x00
  0x00000000, // RDLVL_BEGIN_DELAY_7:RD:16:16:=0x0000 RDLVL_GATE_DELAY_6:RW+:0:16:=0x0000
  0x00000000, // RDLVL_MIDPOINT_DELAY_7:RD:16:16:=0x0000 RDLVL_END_DELAY_7:RD:0:16:=0x0000
  0x00000000, // RDLVL_OFFSET_DIR_7:RW:16:1:=0x00 RDLVL_OFFSET_DELAY_7:RW:0:16:=0x0000
  0x00004040, // RDLVL_GATE_DELAY_7:RW+:16:16:=0x0000 RDLVL_DELAY_7:RW:0:16:=0x4040
  0x02000202, // AXI1_R_PRIORITY:RW:24:3:=0x02 AXI0_FIFO_TYPE_REG:RW:16:2:=0x00 AXI0_W_PRIORITY:RW:8:3:=0x02 AXI0_R_PRIORITY:RW:0:3:=0x02
  0x02020002, // AXI2_W_PRIORITY:RW:24:3:=0x02 AXI2_R_PRIORITY:RW:16:3:=0x02 AXI1_FIFO_TYPE_REG:RW:8:2:=0x00 AXI1_W_PRIORITY:RW:0:3:=0x02
  0x00020200, // AXI3_FIFO_TYPE_REG:RW:24:2:=0x00 AXI3_W_PRIORITY:RW:16:3:=0x02 AXI3_R_PRIORITY:RW:8:3:=0x02 AXI2_FIFO_TYPE_REG:RW:0:2:=0x00
  0x00013207, // AXI0_CURRENT_BDW:RD:24:7:=0x00 AXI0_BDW_OVFLOW:RW:16:1:=0x01 AXI0_BDW:RW:8:7:=0x32 ARB_CMD_Q_THRESHOLD:RW:0:4:=0x07
  0x32000132, // AXI2_BDW:RW:24:7:=0x32 AXI1_CURRENT_BDW:RD:16:7:=0x00 AXI1_BDW_OVFLOW:RW:8:1:=0x01 AXI1_BDW:RW:0:7:=0x32
  0x01320001, // AXI3_BDW_OVFLOW:RW:24:1:=0x01 AXI3_BDW:RW:16:7:=0x32 AXI2_CURRENT_BDW:RD:8:7:=0x00 AXI2_BDW_OVFLOW:RW:0:1:=0x01
  0x00000000, // MEM_RST_VALID:RD:16:1:=0x00 CKE_STATUS:RD:8:2:=0x00 AXI3_CURRENT_BDW:RD:0:7:=0x00
  0x00000000, // TDFI_PHY_WRLAT:RD:24:6:=0x00 DLL_RST_ADJ_DLY:RW:16:8:=0x00 DLL_RST_DELAY:RW:0:16:=0x0000
  0x00000d00, // DRAM_CLK_DISABLE:RW:24:2:=0x00 TDFI_RDDATA_EN:RD:16:6:=0x00 TDFI_PHY_RDLAT:RW_D:8:6:=0x0d UPDATE_ERROR_STATUS:RD:0:7:=0x00
  0x00185000, // TDFI_CTRLUPD_MAX:RW:8:14:=0x1850 TDFI_CTRLUPD_MIN:RD:0:4:=0x00
  0x02000200, // TDFI_PHYUPD_TYPE1:RW:16:16:=0x0200 TDFI_PHYUPD_TYPE0:RW:0:16:=0x0200
  0x02000200, // TDFI_PHYUPD_TYPE3:RW:16:16:=0x0200 TDFI_PHYUPD_TYPE2:RW:0:16:=0x0200
  0x00001850, // TDFI_PHYUPD_RESP:RW:0:14:=0x1850
  0x00007990, // TDFI_CTRLUPD_INTERVAL:RW:0:32:=0x00007990
  0x01020506, // TDFI_DRAM_CLK_DISABLE:RW:24:4:=0x01 TDFI_CTRL_DELAY:RW_D:16:4:=0x02 WRLAT_ADJ:RW:8:6:=0x05 RDLAT_ADJ:RW:0:6:=0x06
  0x000d0a03, // TDFI_WRLVL_WW:RW:16:10:=0x000d TDFI_WRLVL_EN:RW:8:8:=0x0a TDFI_DRAM_CLK_ENABLE:RW:0:4:=0x03
  0x00000000, // TDFI_WRLVL_RESP:RW:0:32:=0x00000000
  0x00000000, // TDFI_WRLVL_MAX:RW:0:32:=0x00000000
  0x04038000, // TDFI_WRLVL_RESPLAT:RW:24:8:=0x04 TDFI_WRLVL_DLL:RW:16:8:=0x03 DFI_WRLVL_MAX_DELAY:RW:0:16:=0x8000
  0x07060a07, // TDFI_RDLVL_LOAD:RW:24:8:=0x07 TDFI_RDLVL_DLL:RW:16:8:=0x06 TDFI_RDLVL_EN:RW:8:8:=0x0a TDFI_WRLVL_LOAD:RW:0:8:=0x07
  0x00ffff1e, // RDLVL_MAX_DELAY:RW:8:16:=0xffff TDFI_RDLVL_RESPLAT:RW:0:8:=0x1e
  0x000d0010, // TDFI_RDLVL_RR:RW:16:10:=0x000d RDLVL_GATE_MAX_DELAY:RW:0:16:=0x0010
  0x00000000, // TDFI_RDLVL_RESP:RW:0:32:=0x00000000
  0x00000000, // RDLVL_RESP_MASK:RW:0:64:=0x00000000
  0x00000000, // RDLVL_RESP_MASK:RW:0:64:=0x00000000
  0x00000000, // RDLVL_GATE_RESP_MASK:RW:0:64:=0x00000000
  0x00000000, // RDLVL_GATE_RESP_MASK:RW:0:64:=0x00000000
  0x00000000, // RDLVL_GATE_PREAMBLE_CHECK_EN:RW:16:1:=0x00 RDLVL_GATE_EN:RW:8:1:=0x00 RDLVL_EN:RW:0:1:=0x00
  0x00000000, // TDFI_RDLVL_MAX:RW:0:32:=0x00000000
  0x00000204, // RDLVL_GATE_DQ_ZERO_COUNT:RW:8:4:=0x02 RDLVL_DQ_ZERO_COUNT:RW:0:4:=0x04
  0x00000000, // RDLVL_ERROR_STATUS:RD:0:34:=0x00000000
  0x00000000, // RDLVL_INTERVAL:RW:8:16:=0x0000 RDLVL_ERROR_STATUS:RD:0:34:=0x00
  0x00010000, // READ_DATA_FIFO_DEPTH:RD:24:8:=0x00 TDFI_PHY_WRDATA:RW:16:3:=0x01 RDLVL_GATE_INTERVAL:RW:0:16:=0x0000
  0x00000000, // ASYNC_CDC_STAGES:RD:24:8:=0x00 WRITE_DATA_FIFO_PTR_WIDTH:RD:16:8:=0x00 WRITE_DATA_FIFO_DEPTH:RD:8:8:=0x00 READ_DATA_FIFO_PTR_WIDTH:RD:0:8:=0x00
  0x00000000, // AXI0_TRANS_WRFIFO_LOG2_DEPTH:RD:24:8:=0x00 AXI0_WRFIFO_LOG2_DEPTH:RD:16:8:=0x00 AXI0_RDFIFO_LOG2_DEPTH:RD:8:8:=0x00 AXI0_CMDFIFO_LOG2_DEPTH:RD:0:8:=0x00
  0x00000000, // AXI1_WRFIFO_LOG2_DEPTH:RD:24:8:=0x00 AXI1_RDFIFO_LOG2_DEPTH:RD:16:8:=0x00 AXI1_CMDFIFO_LOG2_DEPTH:RD:8:8:=0x00 AXI0_WRCMD_PROC_FIFO_LOG2_DEPTH:RD:0:8:=0x00
  0x00000000, // AXI2_RDFIFO_LOG2_DEPTH:RD:24:8:=0x00 AXI2_CMDFIFO_LOG2_DEPTH:RD:16:8:=0x00 AXI1_WRCMD_PROC_FIFO_LOG2_DEPTH:RD:8:8:=0x00 AXI1_TRANS_WRFIFO_LOG2_DEPTH:RD:0:8:=0x00
  0x00000000, // AXI3_CMDFIFO_LOG2_DEPTH:RD:24:8:=0x00 AXI2_WRCMD_PROC_FIFO_LOG2_DEPTH:RD:16:8:=0x00 AXI2_TRANS_WRFIFO_LOG2_DEPTH:RD:8:8:=0x00 AXI2_WRFIFO_LOG2_DEPTH:RD:0:8:=0x00
  0x00000000, // AXI3_WRCMD_PROC_FIFO_LOG2_DEPTH:RD:24:8:=0x00 AXI3_TRANS_WRFIFO_LOG2_DEPTH:RD:16:8:=0x00 AXI3_WRFIFO_LOG2_DEPTH:RD:8:8:=0x00 AXI3_RDFIFO_LOG2_DEPTH:RD:0:8:=0x00
  0x00000000, // LONG_COUNT_MASK:RW:0:5:=0x00
  0x00000040, // ZQ_INTERVAL:RW:0:32:=0x00000040
  0x00010000, // RESERVED:RW:24:5:=0x00 RESERVED:RW:16:1:=0x01 RESERVED:RW:8:1:=0x00 RESERVED:RW:0:5:=0x00
  0x00000001, // RESERVED:RW:8:8:=0x00 RD_TO_ODTH:RW:0:5:=0x01
};
void initDDR(unsigned char idx);
void initDDR(unsigned char idx) {
  static const unsigned int DDR_CTRL_BASE[3] = {
    DDRCTRL0_START,
    DDRCTRL1_START,
    DDRCTRL2_START,
  };
  static const unsigned int DDR_CTRL_INT[3] = {
    INTR_DDRCTRL,
    INTR_DDR0CTRL,
    INTR_DDR1CTRL,
  };
  volatile unsigned int *gic_dist_base = (unsigned int *)GIC_DIST_START;
  // Initialize timer0
  volatile unsigned int *timer0_base = (unsigned int *)TIMER_START;
  *(timer0_base + 2) = 0;
  *(timer0_base + 3);
  *timer0_base = 0x1000000;
  
  // Enable DDR controller interrupt
  *(gic_dist_base + GIC_DIST_ENABLE_SET / 4 + DDR_CTRL_INT[idx] / 32) = 1 << (DDR_CTRL_INT[idx] & 0x1F);
  // Enable Timer interrupt in case of running on Simulator
  *(gic_dist_base + GIC_DIST_ENABLE_SET / 4 + INTR_TIMERS / 32) = 1 << (INTR_TIMERS & 0x1F);
  
  volatile unsigned int *ddr_reg_base = (unsigned int *)(DDR_CTRL_BASE[idx]);
  DMAtrans((unsigned int)DDR_CTRL_CONF,(unsigned int)ddr_reg_base, 162, TR_W_32, TR_W_32);
  volatile unsigned int *ddr_phy_reg_base = ddr_reg_base + 0x100 + 128;
  DMAtrans((unsigned int)&DDR_PHY_CONF[128], (unsigned int)ddr_phy_reg_base, 12, TR_W_32, TR_W_32);
  ddr_phy_reg_base = ddr_reg_base + 0x100;
  DMAtrans((unsigned int)DDR_PHY_CONF, (unsigned int)ddr_phy_reg_base, 128, TR_W_32, TR_W_32);
  ddr_reg_base[0] = 0x0601;
  *(timer0_base + 2) = 0x11;
  wait();
  // Clear DDR controller interrupt
  *(ddr_reg_base + 48) = 0x10;
  // Disable Timer
  *(timer0_base + 2) = 0;
  *(timer0_base + 3);
}
#endif

#ifdef GIC
void initGicDist(void);
void initGicDist(void) {
  int i;
  unsigned int cpumask;
  unsigned int gic_irqs = NUM_INTR;
  volatile unsigned int *gic_dist_base = (unsigned int *)GIC_DIST_START;
  unsigned int cpu = 0;
  unsigned int gpri = ((0xa << PRIORITY_SHIFT) & 0xFF);
  gpri |= gpri << 8;
  gpri |= gpri << 16;

  cpumask = 1 << cpu;
  cpumask |= cpumask << 8;
  cpumask |= cpumask << 16;

  // Disable interrupt controller
  *(gic_dist_base + GIC_DIST_CTRL / 4) = 0;

  /*
   * Set all global interrupts to be level triggered, active low.
   */
  for (i = 32; i < gic_irqs; i += 16)
    *(gic_dist_base + GIC_DIST_CONFIG / 4 + i / 16) = 0;

  /*
   * Set all global interrupts to this CPU only.
   */
  for (i = 32; i < gic_irqs; i += 4)
    *(gic_dist_base + GIC_DIST_TARGET / 4 + i / 4) = cpumask;

  /*
   * Set priority on all global interrupts.
   */
  for (i = 32; i < gic_irqs; i += 4)
    *(gic_dist_base + GIC_DIST_PRI / 4 + i / 4) = gpri;
  /*
   * Disable all interrupts.  Leave the PPI and SGIs alone
   * as these enables are banked registers.
   */
  for (i = 32; i < gic_irqs; i += 32)
    *(gic_dist_base + GIC_DIST_ENABLE_CLEAR / 4 + i / 32) = 0xffffffff;

  *(gic_dist_base + GIC_DIST_CTRL / 4) = 1;
}
void initGicCpu(void);
void initGicCpu(void) {
  volatile unsigned int *gic_dist_base = (unsigned int *)GIC_DIST_START;
  volatile unsigned int *gic_cpu_base = (unsigned int *)GIC_CPU_START;
  int i;
  unsigned int gpri = ((0xa << PRIORITY_SHIFT) & 0xFF);
  gpri |= gpri << 8;
  gpri |= gpri << 16;

  /*
   * Deal with the banked PPI and SGI interrupts - disable all
   * PPI interrupts, ensure all SGI interrupts are enabled.
   */
  *(gic_dist_base + GIC_DIST_ENABLE_CLEAR / 4) = 0xffff0000;
  *(gic_dist_base + GIC_DIST_ENABLE_SET / 4) = 0x0000ffff;

  /*
   * Set priority on PPI and SGI interrupts
   */
  
  for (i = 0; i < 32; i += 4)
    *(gic_dist_base + GIC_DIST_PRI / 4 + i / 4) = gpri;

  *(gic_cpu_base + GIC_CPU_PRIMASK / 4) = LOWEST_PRIORITY;
  *(gic_cpu_base + GIC_CPU_CTRL / 4) = 1;
}
#else
void initIntrCtrl(void);
void initIntrCtrl() {
  volatile unsigned long long *irq_inten =
    (unsigned long long *)(INTRCTRL_START + IRQ_INTEN_L);
  volatile unsigned int *fiq_inten =
    (unsigned int *)(INTRCTRL_START + FIQ_INTEN);
  // Disable all irqs
  *irq_inten = 0ULL;
  *fiq_inten = 0UL;
  // Initialize all interrupt handlers as default handler
  // Initialize the priorities of all irq vectors as corresponding index
  volatile unsigned int *irq_vectors =
    (unsigned int *)(INTRCTRL_START + IRQ_VECTOR_0);
  volatile unsigned int *irq_pr_base =
    (unsigned int *)(INTRCTRL_START + IRQ_PR_START);
  for (unsigned int i = 0; i < 16; i++)
    irq_vectors[i << 1] = &MaPU_Default_IRQ_handler;
  for (unsigned int i = 0; i < 64; i++)
    irq_pr_base[i] = i;
  volatile unsigned int *irq_vector_default =
    (unsigned int *)(INTRCTRL_START + IRQ_VECTOR_DEFAULT);
  *irq_vector_default = MaPU_Default_IRQ_handler;
  // Allow all levels of interrupt
  volatile unsigned int *irq_plevel =
    (unsigned int *)(INTRCTRL_START + IRQ_PLEVEL);
  *irq_plevel = 0;
  // Mask all irqs until a real device interrupt handler is implemented
  volatile unsigned long long *irq_intmask =
    (unsigned long long *)(INTRCTRL_START + IRQ_INTMASK_L);
  *irq_intmask = -1ULL;
  volatile unsigned int *fiq_intmask =
    (unsigned int *)(INTRCTRL_START + FIQ_INTMASK);
  *fiq_intmask = -1UL;
  // Enable all irqs
  *irq_inten = -1ULL;
  *fiq_inten = -1UL;
}
#endif

void initDMACtrl(void);
void initDMACtrl() {
  // Mask all status
  volatile struct int_type_strt *mask_base =
    (struct int_type_strt *)(DMA_CTRL_START + MASK_START);
  mask_base->transfer = 0xFF00ULL;
  mask_base->block = 0xFF00ULL;
  mask_base->src_tran = 0xFF00ULL;
  mask_base->dest_tran = 0xFF00ULL;
  mask_base->error = 0xFF00ULL;
  // Clear all status
  volatile struct int_type_strt *clear_base =
    (struct int_type_strt *)(DMA_CTRL_START + CLEAR_START);
  clear_base->transfer = -1ULL;
  clear_base->block = -1ULL;
  clear_base->src_tran = -1ULL;
  clear_base->dest_tran = -1ULL;
  clear_base->error = -1ULL;
  // Wait until clear operation is validated
  volatile unsigned long long *status_int =
    (unsigned long long *)(DMA_CTRL_START + STATUS_INT);
  while (*status_int);
  // Open DMA
  volatile unsigned long long *dma_cfg_reg =
    (unsigned long long *)(DMA_CTRL_START + DMA_CFG_REG);
  *dma_cfg_reg = 1ULL;

  // Unmask DMA interrupt
#ifdef GIC
  volatile unsigned int *gic_dist_base = (unsigned int *)GIC_DIST_START;
  *(gic_dist_base + GIC_DIST_ENABLE_SET / 4 + INTR_DMACTRL / 32) = 1 << (INTR_DMACTRL & 0x1F);
#else
  volatile unsigned long long *irq_intmask =
    (unsigned long long *)(INTRCTRL_START + IRQ_INTMASK_L);

  *irq_intmask = (*irq_intmask) & ~(1ULL << INTR_DMACTRL);
#endif
}

extern uint8_t __data_load;
extern uint8_t __data_start;
extern uint8_t _edata;

void LowLevelInit(void (*reset_addr)(), void (*return_addr)());
void LowLevelInit(void (*reset_addr)(), void (*return_addr)()) {

  int i;

#ifdef NEED_PHY
  initPHY();
#endif
#ifdef GIC
  initGicDist();
  initGicCpu();
#else
  initIntrCtrl();
#endif
//  initDMACtrl();

/*
#ifdef NEED_DDR0
  initDDR(0);
#endif

#ifdef NEED_DDR1
  initDDR(1);
#endif

#ifdef NEED_DDR2
  initDDR(2);
#endif
*/

/*
  DMAtrans((unsigned int)&__data_load,
           (unsigned int)&__data_start,
           (&_edata - &__data_start) / 4,
           TR_W_32, TR_W_32);

*/

  for (i=0; i<(&_edata - &__data_start);)
  {
    *((unsigned int*)(&__data_load+i)) = *((unsigned int*)(&__data_start+i));
    i += 4;
  }
 
}
