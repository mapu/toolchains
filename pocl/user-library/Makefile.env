###########  MakeFile.env  ##########
# Top level pattern, include by Makefile of child directory
# in which variable like TOPDIR, TARGET or LIB may be needed
# 
# 1. 源文件目录src，模块xxx放在src/xxx下，主程序在src下
# 2. 头文件放在include目录下，模块xxx的头文件放在include/xxx目录下
# 3. 模块输出的链接库放在lib目录下
# 4. 可执行文件放在bin目录下

CC:=arm-linux-gnueabihf-gcc
CXX:=arm-linux-gnueabihf-g++
MAKE:=make
AR:=ar crs
RM:=rm -rf

CFLAGS+= -I"$(TOPDIR)/include" -I"$(TOPDIR)/../.." $(DEBUG_OPTIONS)
CXXFLAGS+= -I"$(TOPDIR)/include" -I"$(TOPDIR)/../.." $(DEBUG_OPTIONS)
LDFLAGS+= -L"$(TOPDIR)/lib" 

C_EXTENSION?=.c
CXX_EXTENSION?=.cpp

BUILD_PATH:=$(subst src,build,$(CURDIR))
BUILD_PATH:=$(subst $(shell readlink -f $(TOPDIR)),$(TOPDIR),$(BUILD_PATH))
BIN_PATH?=$(TOPDIR)/bin
LIB_PATH?=$(TOPDIR)/lib

SUBDIRS:=$(shell find . -maxdepth 1 -type d)
SUBDIRS:=$(basename $(patsubst ./%,%,$(SUBDIRS)))
SUBDIRS:=$(filter-out $(exclude_dirs),$(SUBDIRS))

ifneq ($(LIB),)
ifneq ($(lib_dirs),)
LIB_SOURCE_LIBS:=$(lib_dirs)
else
LIB_SOURCE_LIBS:= . $(SUBDIRS)
LIB_SOURCE_LIBS:=$(filter-out $(lib_exclude_dirs),$(LIB_SOURCE_LIBS))
endif
endif

LIB_SOURCE_LIBS:=$(patsubst %,$(BUILD_PATH)/%/builtin.a,$(LIB_SOURCE_LIBS))

SUB_LIBS:=$(patsubst %,$(BUILD_PATH)/%/builtin.a,$(SUBDIRS))
SUBDIRS:=$(patsubst %,%,$(SUBDIRS))

C_SRCS:=$(wildcard *$(C_EXTENSION))
CXX_SRCS:=$(wildcard *$(CXX_EXTENSION))

C_OBJS:=$(C_SRCS:%$(C_EXTENSION)=$(BUILD_PATH)/%.o)
CXX_OBJS:=$(CXX_SRCS:%$(CXX_EXTENSION)=$(BUILD_PATH)/%.o)

C_DEPENDS:=$(C_SRCS:%$(C_EXTENSION)=$(BUILD_PATH)/%.d)
CXX_DEPENDS:=$(CXX_SRCS:%$(CXX_EXTENSION)=$(BUILD_PATH)/%.d)

DEPENDS:=$(C_DEPENDS) $(CXX_DEPENDS)

OBJS:=$(C_OBJS) $(CXX_OBJS)

#$(warning C_EXTENSION [$(C_EXTENSION)])
#$(warning CXX_EXTENSION [$(CXX_EXTENSION)])
#$(warning BUILD_PATH [$(BUILD_PATH)])
#$(warning BIN_PATH [$(BIN_PATH)])
#$(warning SUBDIRS [$(SUBDIRS)])
#$(warning C_SRCS [$(C_SRCS)])
#$(warning C_OBJS [$(C_OBJS)])
#$(warning C_DEPENDS [$(C_DEPENDS)])
#$(warning CXX_SRCS [$(CXX_SRCS)])
#$(warning CXX_OBJS [$(CXX_OBJS)])
#$(warning CXX_DEPENDS [$(CXX_DEPENDS)])
#$(warning TARGET [$(TARGET)])
#$(warning CFLAGS [$(CFLAGS)])
#$(warning CXXFLAGS [$(CXXFLAGS)])
#$(warning LDFLAGS [$(LDFLAGS)])
#$(warning LIB [$(LIB)])
#$(warning OBJS [$(OBJS)])
#$(warning DEPENDS [$(DEPENDS)])
#$(warning TARGET [$(TARGET)])
#$(warning CC [$(CC)])
#$(warning CXX [$(CXX)])
#$(warning SUB_LIBS [$(SUB_LIBS)])
#$(warning LIB_SOURCE_LIBS [$(LIB_SOURCE_LIBS)])

ifneq ($(subst src,xxx,$(CURDIR)),$(CURDIR))
all: init build lib target subdirs
else
all: subdirs
endif

build : $(SUB_LIBS) $(BUILD_PATH)/builtin.a

$(SUB_LIBS): 
	for dir in $(SUBDIRS);\
	do $(MAKE) -C $$dir init build TOPDIR=$(TOPDIR)/.. ||exit 1;\
	done

ifeq ($(TARGET),)
target:
else
target: $(BIN_PATH)/$(TARGET)
$(BIN_PATH)/$(TARGET): $(OBJS) $(SUB_LIBS)
	$(CXX) $^ $(LDFLAGS) -o $@
endif

ifeq ($(LIB),)
lib: 
else
lib: $(LIB_PATH)/lib$(LIB).a $(LIB_PATH)/lib$(LIB).so
$(LIB_PATH)/lib$(LIB).a: $(LIB_SOURCE_LIBS)
	cd $(BUILD_PATH)
	for lib in $(LIB_SOURCE_LIBS);\
	do ar x $$lib ;\
	$(AR) $@ `ar t $$lib` ;\
	$(RM) `ar t $$lib` ;\
	done
	chmod 777 $@

$(LIB_PATH)/lib$(LIB).so:$(LIB_SOURCE_LIBS) 
	cd $(BUILD_PATH)
	mkdir .make.so
	for lib in $(LIB_SOURCE_LIBS);\
	do ar x $$lib ;\
	mv `ar t $$lib` .make.so ; \
	done
	$(CXX) -shared -fpic $(CXXFLAGS) .make.so/*.o -o $@
	chmod 777 $@
	$(RM) .make.so ;
endif

init: 
	mkdir -p $(BUILD_PATH) $(BIN_PATH)

$(BUILD_PATH)/builtin.a :$(OBJS) $(SUB_LIBS)
	cd $(BUILD_PATH)
	for lib in $(SUB_LIBS);\
	do ar x $$lib ;\
	$(AR) $@ `ar t $$lib` ;\
	$(RM) `ar t $$lib` ;\
	done
	$(AR) $@ $(OBJS)
	chmod 777 $@
	
subdirs:
	for dir in $(SUBDIRS);\
	do $(MAKE) -C $$dir all TOPDIR=$(TOPDIR)/.. ||exit 1;\
	done

$(C_OBJS):$(BUILD_PATH)/%.o : %$(C_EXTENSION)
	$(CC) -c -fpic $< $(CFLAGS) -o $@
	chmod 777 $@
	
$(CXX_OBJS):$(BUILD_PATH)/%.o : %$(CXX_EXTENSION)
	$(CXX) -c -fpic $< $(CXXFLAGS) -o $@
	chmod 777 $@
	
-include $(DEPENDS)

$(C_DEPENDS):$(BUILD_PATH)/%.d : %$(C_EXTENSION)
	set -e; rm -f $@; \
	$(CC) -MM $(CFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[:]*,$(BUILD_PATH)/\1.o $@:,g' < $@.$$$$ > $@; \
	rm $@.$$$$
	
$(CXX_DEPENDS):$(BUILD_PATH)/%.d : %$(CXX_EXTENSION)
	set -e; rm -f $@; \
	$(CXX) -MM $(CXXFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[:]*,$(BUILD_PATH)/\1.o $@:,g' < $@.$$$$ > $@; \
	rm $@.$$$$
	
clean:
	for dir in $(SUBDIRS);\
	do  $(MAKE) -C $$dir TOPDIR=$(TOPDIR)/.. clean||exit 1;\
	done
	$(RM) $(BUILD_PATH)/builtin.a $(OBJS) $(DEPENDS)
	if [ -n "$(TARGET)" ] ; then $(RM) $(BIN_PATH)/$(TARGET) ; fi
	if [ -n "$(LIB)" ] ; then $(RM) $(LIB_PATH)/lib$(LIB).a $(LIB_PATH)/lib$(LIB).so ; fi
	
tags:
	ctags -R

help:
	@echo " all				 - (==make) compile and link"
	@echo " clean			 - clean all generated files"
	@echo " tags			 - create ctags for vimeditor"
	@echo " help			 - print help information"

.PHONY: build init subdirs lib clean all msg tags help target