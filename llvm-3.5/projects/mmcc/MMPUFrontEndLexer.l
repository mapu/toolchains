%{
#include "MMPUGenFrontEndParser.h" // generated by bison, including definition of tokens and data types
#include <string>
#define YY_DECL int yylex(YYSTYPE *yylval_param, MMPUCompiler *_mc)
//#define SAVE_TOKEN yylval->string = new std::string(mmpucompilertext, mmpucompilerleng)
//#define TOKEN(t) (yylval->token = t)
static MMPUCompiler *mc;
#define YY_INPUT(buf, result, max_size)                                   \
  do {                                                                    \
    for (result = 0; result < max_size; result++)                         \
      if (!mc->In->get(buf[result]) || buf[result] == EOF) break;         \
  } while (0)
#define YY_USER_INIT mc = _mc;
#define YYSTYPE ExprAST *
%}

%option bison-bridge

%option prefix="mmpucompiler"

%option noyywrap

%option nounput

%e  1019
%p  2807
%n  371
%k  284
%a  1213
%o  1117

O   [0-7]
D   [0-9]
NZ  [1-9]
L   [a-zA-Z_]
A   [a-zA-Z_0-9]
H   [a-fA-F0-9]
HP  (0[xX])
E   ([Ee][+-]?{D}+)
P   ([Pp][+-]?{D}+)
FS  (f|F|l|L)
IS  (((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))
CP  (u|U|L)
SP  (u8|u|U|L)
ES  (\\(['"\?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))
WS  [ \t\v\n\f]

%{
#include <stdio.h>

extern int sym_type(const char *);  /* returns type from symbol table */

#define sym_type(identifier) IDENTIFIER /* with no symbol table, fake it */

static void comment(void);
static int check_type(YYSTYPE* & yylval);
%}

%%
"/*"                                    { comment(); }
"//".*                                    { /* consume //-comment */ }

"auto"					{ return(AUTO); }
"break"					{ return(BREAK); }
"case"					{ return(CASE); }
"char"					{ return(CHAR); }
"const"					{ return(CONST); }
"continue"				{ return(CONTINUE); }
"default"				{ return(DEFAULT); }
"do"					{ return(DO); }
"double"				{ return(DOUBLE); }
"else"					{ return(ELSE); }
"enum"					{ return(ENUM); }
"extern"				{ return(EXTERN); }
"float"					{ return(FLOAT); }
"for"					{ return(FOR); }
"goto"					{ return(GOTO); }
"if"					{ return(IF); }
"inline"				{ return(INLINE); }
"int"					{ return(INT); }
"long"					{ return(LONG); }
"register"				{ return(REGISTER); }
"restrict"				{ return(RESTRICT); }
"return"				{ return(RETURN); }
"short"					{ return(SHORT); }
"signed"				{ return(SIGNED); }
"sizeof"				{ return(SIZEOF); }
"static"				{ return(STATIC); }
"struct"				{ return(STRUCT); }
"switch"				{ return(SWITCH); }
"typedef"				{ return(TYPEDEF); }
"union"					{ return(UNION); }
"unsigned"				{ return(UNSIGNED); }
"void"					{ return(VOID); }
"volatile"				{ return(VOLATILE); }
"while"					{ return(WHILE); }
"_Alignas"                              { return ALIGNAS; }
"_Alignof"                              { return ALIGNOF; }
"_Atomic"                               { return ATOMIC; }
"_Bool"                                 { return BOOL; }
"_Complex"                              { return COMPLEX; }
"_Generic"                              { return GENERIC; }
"_Imaginary"                            { return IMAGINARY; }
"_Noreturn"                             { return NORETURN; }
"_Static_assert"                        { return STATIC_ASSERT; }
"_Thread_local"                         { return THREAD_LOCAL; }
"__func__"                              { return FUNC_NAME; }

 /* MMPU specialized token */
"apdl"                                  { return APDL; }
"dmem"                                  { return DM; }
"mreg"                                  { return MREG; }
"treg"                                  { return TREG; }
"kreg"                                  { return KREG; }
"mac"                                   { return MACREG; }
"(+)"                                   { return SADD; }
"(-)"                                   { return SSUB; }
 /* * */

{L}{A}*					{ return check_type(yylval); }

{HP}{H}+{IS}?				{ int64_t num = atol(mmpucompilertext); *yylval = new IntExprAST(num); return I_CONSTANT; }
{NZ}{D}*{IS}?				{ int64_t num = atol(mmpucompilertext); *yylval = new IntExprAST(num); return I_CONSTANT; }
"0"{O}*{IS}?				{ int64_t num = atol(mmpucompilertext); *yylval = new IntExprAST(num); return I_CONSTANT; }
{CP}?"'"([^'\\\n]|{ES})+"'"		{ int64_t num = atol(mmpucompilertext); *yylval = new IntExprAST(num); return I_CONSTANT; }

{D}+{E}{FS}?				{ double num = atof(mmpucompilertext); *yylval = new FPExprAST(num); return F_CONSTANT; }
{D}*"."{D}+{E}?{FS}?			{ double num = atof(mmpucompilertext); *yylval = new FPExprAST(num); return F_CONSTANT; }
{D}+"."{E}?{FS}?			{ double num = atof(mmpucompilertext); *yylval = new FPExprAST(num); return F_CONSTANT; }
{HP}{H}+{P}{FS}?			{ double num = atof(mmpucompilertext); *yylval = new FPExprAST(num); return F_CONSTANT; }
{HP}{H}*"."{H}+{P}{FS}?			{ double num = atof(mmpucompilertext); *yylval = new FPExprAST(num); return F_CONSTANT; }
{HP}{H}+"."{P}{FS}?			{ double num = atof(mmpucompilertext); *yylval = new FPExprAST(num); return F_CONSTANT; }

({SP}?\"([^"\\\n]|{ES})*\"{WS}*)+	{ return STRING_LITERAL; }

"..."					{ return ELLIPSIS; }
">>="					{ return RIGHT_ASSIGN; }
"<<="					{ return LEFT_ASSIGN; }
"+="					{ return ADD_ASSIGN; }
"-="					{ return SUB_ASSIGN; }
"*="					{ return MUL_ASSIGN; }
"/="					{ return DIV_ASSIGN; }
"%="					{ return MOD_ASSIGN; }
"&="					{ return AND_ASSIGN; }
"^="					{ return XOR_ASSIGN; }
"|="					{ return OR_ASSIGN; }
">>"					{ return RIGHT_OP; }
"<<"					{ return LEFT_OP; }
"++"					{ return INC_OP; }
"--"					{ return DEC_OP; }
"->"					{ return PTR_OP; }
"&&"					{ return AND_OP; }
"||"					{ return OR_OP; }
"<="					{ return LE_OP; }
">="					{ return GE_OP; }
"=="					{ return EQ_OP; }
"!="					{ return NE_OP; }
";"					{ return ';'; }
("{"|"<%")				{ return '{'; }
("}"|"%>")				{ return '}'; }
","					{ return ','; }
":"					{ return ':'; }
"="					{ return '='; }
"("					{ return '('; }
")"					{ return ')'; }
("["|"<:")				{ return '['; }
("]"|":>")				{ return ']'; }
"."					{ return '.'; }
"&"					{ return '&'; }
"!"					{ return '!'; }
"~"					{ return '~'; }
"-"					{ return '-'; }
"+"					{ return '+'; }
"*"					{ return '*'; }
"/"					{ return '/'; }
"%"					{ return '%'; }
"<"					{ return '<'; }
">"					{ return '>'; }
"^"					{ return '^'; }
"|"					{ return '|'; }
"?"					{ return '?'; }

{WS}					{ /* whitespace separates tokens */ }
.					{ /* discard bad characters */ }

%%

static void comment(void)
{
  int c;

  while ((c = yyinput()) != 0) {
    if (c == '*') {
      while ((c = yyinput()) == '*') ;
      if (c == '/') return;
      if (c == 0) break;
    }
    if (c == '\n') ;
  }
  mmpucompilererror(mc, "unterminated comment");
}

static int check_type(YYSTYPE* & yylval)
{
  switch (sym_type(mmpucompilertext)) {
  case TYPEDEF_NAME:                /* previously defined */
    return TYPEDEF_NAME;
  case ENUMERATION_CONSTANT:        /* previously defined */
    return ENUMERATION_CONSTANT;
  default:                          /* includes undefined */
    Symbol *s;
    s = mc->LookupSym(*(new std::string(mmpucompilertext)), Symbol::TABLE_VAR);
    if (s != NULL && isa<TagExprAST>(s->getExpr()) &&
        (dyn_cast<TagExprAST>(s->getExpr())->getTag() ==
          TagExprAST::TYPE_TYPEDEF_IDENT)) {
      *yylval = new SymExprAST(s, NULL);
      return TYPEDEF_NAME;
    } else { 
      *yylval = new VariableExprAST(yytext,NULL);
      return IDENTIFIER;
    }
  }
}

