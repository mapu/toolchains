//===-- MSPUInstPrinter.h - Convert MSPU MCInst to assembly syntax --===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This class prints an MSPU MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef MSPUINSTPRINTER_H
#define MSPUINSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"

namespace llvm
{
	class MSPUInstPrinter: public MCInstPrinter
	{
		public:
			explicit
			MSPUInstPrinter(const MCAsmInfo &MAI,
							const MCInstrInfo &MII,
							const MCRegisterInfo &MRI)
							: MCInstPrinter(MAI, MII, MRI)
			{
			}

			virtual void
			printInst(const MCInst *MI, raw_ostream &O, StringRef Annot);

			void
			printInstList(const MCInst *MI, raw_ostream &O, StringRef Annot);

			// autogenerated by tblgen
			void
			printInstruction(const MCInst *MI, raw_ostream &O);
			static const char *
			getRegisterName(unsigned RegNo);

			void
			printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

			void
			printAddrJImm(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

			void
			printAddrJJ(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

			void
			printCallMFlag(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

			void
			printKMFlag(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

			void
			printSCUFlag(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

			void
			printSCUExtraUnaReg(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

			void
			printXferFlag(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printXYFlag(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

			void
			printLdStOpc(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinKREG(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinKB(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinKE(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinKS(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinKI(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinKM(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinAccessMode(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinSVR(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinSHU(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinT(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinKG(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinKL(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

      void
      printIntrinMC(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

			// handle 1. expr; 2. imm ext
			void
			printImmExt(const MCInst *MI, unsigned OpNo, raw_ostream &O) const;

			// (0<<4)+
			enum MSPU_KB {
			  KB0 = 0,
			  KB1 = 1,
			  KB2 = 2,
			  KB3 = 3,
			  KB4 = 4,
			  KB5 = 5,
			  KB6 = 6,
			  KB7 = 7,
			  KB8 = 8,
			  KB9 = 9,
			  KB10 = 10,
			  KB11 = 11,
			  KB12 = 12,
			  KB13 = 13,
			  KB14 = 14,
			  KB15 = 15
			};

			// (1<<4)+
			enum MSPU_KE {
			  KE0 = (1<<4)+0,
			  KE1 = (1<<4)+1,
			  KE2 = (1<<4)+2,
			  KE3 = (1<<4)+3,
			  KE4 = (1<<4)+4,
			  KE5 = (1<<4)+5,
			  KE6 = (1<<4)+6,
			  KE7 = (1<<4)+7,
			  KE8 = (1<<4)+8,
			  KE9 = (1<<4)+9,
			  KE10 = (1<<4)+10,
			  KE11 = (1<<4)+11,
			  KE12 = (1<<4)+12,
			  KE13 = (1<<4)+13,
			  KE14 = (1<<4)+14,
			  KE15 = (1<<4)+15
			};

			// (2<<4)+
			enum MSPU_KS {
			  KS0 = (2<<4)+0,
			  KS1 = (2<<4)+1,
			  KS2 = (2<<4)+2,
			  KS3 = (2<<4)+3,
			  KS4 = (2<<4)+4,
			  KS5 = (2<<4)+5,
			  KS6 = (2<<4)+6,
			  KS7 = (2<<4)+7,
			  KS8 = (2<<4)+8,
			  KS9 = (2<<4)+9,
			  KS10 = (2<<4)+10,
			  KS11 = (2<<4)+11,
			  KS12 = (2<<4)+12,
			  KS13 = (2<<4)+13,
			  KS14 = (2<<4)+14,
			  KS15 = (2<<4)+15
			};

			enum MSPU_KI {
			  KI0 = (3<<4)+0,
			  KI1 = (3<<4)+1,
			  KI2 = (3<<4)+2,
			  KI3 = (3<<4)+3,
			  KI4 = (3<<4)+4,
			  KI5 = (3<<4)+5,
			  KI6 = (3<<4)+6,
			  KI7 = (3<<4)+7,
			  KI8 = (3<<4)+8,
			  KI9 = (3<<4)+9,
			  KI10 = (3<<4)+10,
			  KI11 = (3<<4)+11,
			  KI12 = (3<<4)+12,
			  KI13 = (3<<4)+13,
			  KI14 = (3<<4)+14,
			  KI15 = (3<<4)+15
			};

			enum MSPU_KM {
			  KM0 = (4<<4)+(0<<2),
			  KM1 = (4<<4)+(1<<2),
			  KM2 = (4<<4)+(2<<2)
			};

			enum MSPU_KG {
			  KG0 = (5<<4)+(0<<2),
			  KG1 = (5<<4)+(1<<2),
			  KG2 = (5<<4)+(2<<2)
			};

			enum MSPU_KL {
			  KL0 = (6<<4)+(0<<2),
			  KL1 = (6<<4)+(1<<2),
			  KL2 = (6<<4)+(2<<2)
			};
	};

}  // end namespace llvm

#endif
