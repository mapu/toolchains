//===-- MSPUSubtarget.h - Define Subtarget for the MSPU -------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the MSPU specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef MSPU_SUBTARGET_H
#define MSPU_SUBTARGET_H

#include "MSPUFrameLowering.h"
#include "MSPUISelLowering.h"
#include "MSPUInstrInfo.h"
#include "MSPUSelectionDAGInfo.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "MSPUGenSubtargetInfo.inc"

namespace llvm {
class StringRef;
class MSPUFrameLowering;

class MSPUSubtarget: public MSPUGenSubtargetInfo {
  InstrItineraryData InstrItins;
  const DataLayout DL; // Calculates type size & alignment
  MSPUInstrInfo InstrInfo;
  MSPUFrameLowering FrameLowering;
  MSPUTargetLowering TLInfo;
  MSPUSelectionDAGInfo TSInfo;
public:
  MSPUSubtarget(const std::string &TT,
                const std::string &CPU,
                const std::string &FS, TargetMachine &TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void
  ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  /// getInstrItins - Return the instruction itineraies based on subtarget
  /// selection.
  const InstrItineraryData *
  getInstrItineraryData() const {
    return &InstrItins;
  }

  const MSPUInstrInfo *getInstrInfo() const override {
    return &InstrInfo;
  }
  const DataLayout *getDataLayout() const override { return &DL; }

  const MSPUTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const MSPUSelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const MSPURegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
};
}    // end namespace llvm

#endif
